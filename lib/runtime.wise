import fd_write : (i32, i32, i32, i32) -> i32 = wasi_snapshot_preview1.fd_write;

// Prints a byte to stdout
printByte(i : i32) -> () {
	// What offset to write from
	store<>(0, 12);
	// How many bytes to write
	store<>(4, 1);
	// The byte to write
	store<>(12, i);

	// Print it to stdout
	fd_write(1, 0, 1, 8);
	{}
}

// Print unsigned i32 as decimal
printu32(i : i32) -> () {
	if (i <u 10) {
		printByte(48 + i)
	} else {
		printu32(div_u<>(i, 10));
		printu32(rem_u<>(i, 10));
	}
}

// Print signed i32 as decimal
printi32(i : i32) -> () {
	if (i < 0) {
		printByte(45);
		printu32(0 - i);
	} else {
		printu32(i)
	}
}

printHex32(i : i32) -> () {
	if (i < 10) {
		printByte(48 + i)
	} else if (i < 16) {
		printByte(55 + i)
	} else {
		printHex32(div_u<>(i, 16));
		printHex32(i & 0xf);
	}
}

printv128(v : v128) -> () {
	// What offset to write from
	store<>(0, 12);
	// How many bytes to write
	store<>(4, 16);
	// The byte to write
	v128.store<>(12, v);

	// Print it to stdout
	fd_write(1, 0, 1, 8);
	{}
}

// Print signed i32 as decimal
printlni32(i : i32) -> () {
	printi32(i);
	printByte(10);
}

// Print bool as sting (TRUE or FALSE)
printlnb(i : i32) -> () {
	if (i == 1) {
		printByte(84);
		printByte(82);
		printByte(85);
		printByte(69);
	} else {
		printByte(70);
		printByte(65);
		printByte(76);
		printByte(83);
		printByte(69);
	}
	printByte(10);
}

// for tests. the current version is a loss of accuracy! (trunc/-/*)
printf64(f : f64) -> () {
	b : i32 = trunc_s<>(f);
	printi32(b); // sign and int
	printByte(46); // .
	f0 : f64 = abs<>(f);
	f1 : f64 = (f0 - trunc<>(f0)) * 100000000.0;
	printi32(trunc_u<>(f1)); // 8 symbols
	f0 = (f1 - trunc<>(f1));
	f1 = f0 * 100000000.0; // 8 symbols
	printi32(trunc_u<>(f1));
	{}
}

printlnf64(f : f64) -> () {
	printf64(f);
	printByte(10);
}

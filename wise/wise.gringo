wise = ws decl;

decl = import | include | global | function | $"wase_empty_0";

global = optexport id $"swap" 
		":" ws optmutable type $"swap"
		"=" ws exp ";" ws decl $"global_6"; // (id, export : bool, type, mutable : bool, exp, body, scope)

templates = ("[" ws templateName "]" ws) | $"nil";
templateName = $"nil" $templateid $"cons"("," ws $templateid $"cons")*;
templateid = ('A'-'Z' | 'a'-'z') letterOrDigit*;
templateValue = ("[" ws types "]" ws);

// function(id, export : bool, templates : [name], args : [idtype(id, type)], [returnTypes], body, scope)
function = optexport id templates ws "(" lambdaargs ")" ws "->" ws type exp decl $"function_7";
	lambdaargs = $"nil" id ":" ws type $"idtype_2" $"cons" ("," ws id ":" ws type $"idtype_2" $"cons")*
		| $"nil";

import = 
	"import" ws id ":" ws optmutable type $"swap" "=" ws id "." id ";" ws decl $"import_6" // id, type, mutable, module, name, scope
	;
	
include = "include" !letterOrDigit ws $(letterOrDigit+ ("/" letterOrDigit+)+) ws ";" ws decl $"wise_include_2";

exp = 
	("var" !letterOrDigit ws $$"1" $"s2i" id $"swap" opttype "=" ws exp ";" ws expsemi $"brace_1" $"let_5"
		| id $$"0" $"s2i" opttype "=" ws exp ";" ws expsemi $"brace_1" $"let_5"
	)
	|> exp "||" ws exp $"bool_or_2"
	|> exp "&&" ws exp $"bool_and_2"
	|> exp "|" ws exp $"or_2"
	|> exp "&" ws exp $"and_2"
	|> exp "^" ws exp $"xor_2"
	|> exp "==" ws exp $"equal_2" | exp "!=" ws exp $"not_equal_2" | exp "is" ws "null" ws $"is_null_1"
	|> exp ("<=u" ws exp $"less_equalu_2" | "<u" ws exp $"lessu_2" | ">=u" ws exp $"greater_equalu_2" | ">u" ws exp $"greateru_2"
			| "<=" ws exp $"less_equal_2" | "<" ws exp $"less_2" | ">=" ws exp $"greater_equal_2" | ">" ws exp $"greater_2")

	|> exp < ("+" ws exp $"add_2" | "-" ws exp $"sub_2")*
	|> exp ("*" ws exp $"mul_2" | "/" ws exp $"div_2" | "%"  ws exp $"mod_2")*

	|> exp ':' ws type $"typeannotation_2"

	|> wasmop

	|> (
		'!' ws exp $"bool_not_1"
		| "-" ws exp $"negate_1" // Only for floats
		| exp (
			templateValue $"polycall_2"
			| "(" ws exps ")" ws $"call_2"
			| "." ws int $"tupledot_2"
		)*
	)

	|> brace $"brace_1"
	|> "(" ws exp ")" ws
	|> atom;

opttype = ":" ws type | $$"auto" $"basictype_1";

brace = "{" ws expsemi "}" ws;

atom = "if" !letterOrDigit ws "(" ws exp ")" ws exp "else" ws exp $"ifelse_3"
		| "if" !letterOrDigit ws "(" ws exp ")" ws exp $"if_2"
		| "true" !letterOrDigit $"true" $"bool_1" ws
		| "false" !letterOrDigit $"false" $"bool_1" ws
		| "return" !letterOrDigit ws $"nil" (exp $"cons")? $"return_1"
		| "while"  !letterOrDigit ws "(" ws exp ")" ws exp $"while_2"
		| "break" !letterOrDigit ws $"break_0"
		| "continue" !letterOrDigit ws $"continue_0" 
		| "sizeoftype"  !letterOrDigit ws "(" ws type ")" ws $"sizeoftype_1"
		| "defoftype"  !letterOrDigit ws "(" ws type ")" ws $"defoftype_1"
		| id ":=" ws exp $"set_2"
		| id $"var_1"

		| '(' ws $"nil" exp "," ws $"cons" ')' ws $"tuple_1"
		| '(' ws exps ')' ws $"tuple_1"

//		| string $"string_1"
		| "0x" $(hexdigit+) ("w" $"hex64_1" | "n" $"hexf32_1" | "h" $"hexf64_1" | $"hex32_1") ws
		| $('0'-'9'+) "w" ws $"i64_1"
		| double $"double_1"
		| int $"int_1"
		// | '<<' $(!('>' '>') anychar)* ('>' '>') ws
		;

wasmop = $wasmid ws "<" ws wargs ">" ws "(" ws exps ")" ws $"wasm_op_3";
	wargs = $"nil" warg $"cons"("," ws warg $"cons")* | $"nil";
	warg = type | id $"var_1" | int $"int_1";

	wasmid = 'a'-'z' wasmidpart* ("." wasmidpart+)?;
	wasmidpart = 'a'-'z' | '0'-'9' | "_";

exps = $"nil" exp $"cons" ("," ws exp $"cons")* ("," ws)? 
	| $"nil";

expsemi = $"nil" exp $"cons" (#";" ws exp $"cons")* (";" ws)? 
	| $"nil";

optexport = "export" ws (string | $$"1") | $$"";

optmutable = ("mutable" ws $$"1" | $$"0" ) $"s2i";

type = $("i32" | "i64" | "f32" | "f64" | "v128" | "bool" | "auto" | templateid ) ws $"basictype_1"
	| "(" ws types ")" ws "->" ws type $"fntype_2"
	| "(" ws types ")" ws $"tupletype_1"; // Tuples

types = $"nil" type $"cons" ("," ws type $"cons")* | $"nil";


id = $(('a'-'z' | 'A'-'Z' | '_') letterOrDigit*) ws;

letterOrDigit = 'a'-'z'
	| 'A'-'Z'
	| '_'
	| '0'-'9';

int = $('0'-'9'+) ws $"s2i"; 

double = $(digits '.' (!'.') digits?) ws $"s2d"
	| $('.' digits) ws $"s2d";
digits = '0'-'9'+;

string = $('"' onechar_* '"') $"unescape" ws;

onechar_ = backslash "u" hexdigit hexdigit hexdigit hexdigit
	| backslash "x" hexdigit hexdigit
	| backslash escapedchar_
	| !'"' !backslash anychar;

hexdigit = '0'-'9'
	| 'a'-'f'
	| 'A'-'F';

escapedchar_ = backslash | '"' | "n" | "t" | "r";
backslash = '\';

ws = s*;
s = cs+;
anychar = '0x0000'-'0xffff';
cs = " " | "\t" | "\n" | "//" (!"\n" anychar)* "\n" | "/*" (!"*/" anychar)* "*/" | "\r";
lastLineComment = "//" (!"\n" anychar)*;
wise
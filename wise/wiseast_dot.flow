import wise/wiseast_types;
import wise/wise_types;
import ds/set;
import text/blueprint;

export {

	makeWeTupleDotFn(e : WiExp, index : int, type : WiseAstType) -> WaseTupledotFn;
	WaseTupledotFn(
		value : WiExp,
		fn : WaseDotFn,
	);
	WaseDotFn(
		name : string,  // format : dot_type[_type]_index
		argTypes : [WiseAstType],
		index : int,
	);
	// isDotCallFn(v : WaseAst) -> bool;

	// addDotNFunctions(fns : Set<WaseDotFn>, d : WaseAst) -> WaseAst;

}

makeWeTupleDotFn(e : WiExp, index : int, type : WiseAstType) -> WaseTupledotFn {
	types = extractTupleTypesFromWiseAstTypes([type]);
	dotFn = "dot_"
			+ superglue(types, wiseAstType2dotname, "_") + "_"
			+ (if (index >= 0) i2s(index) else "");
	value = WiCall(WiVar(dotFn, 0), [e], 0); // ? eclass
	WaseTupledotFn(
		value,
		WaseDotFn(dotFn, types, index)
	);
}

extractTupleTypesFromWiseAstTypes(types : [WiseAstType]) -> [WiseAstType] {
	mapConcat(types, \t -> switch (t : WiseAstType) {
		WiseAstTypeI32() : [t];
		WiseAstTypeI64() : [t];
		WiseAstTypeF32() : [t];
		WiseAstTypeF64() : [t];
		WiseAstTypeFunc(__, __) : [t];
		WiseAstTypeSIMD() : [t];
		WiseAstTypeBool() : [t];
		WiseAstTypeString() : [t];
		WiseAstTypeTuple(fields) : extractTupleTypesFromWiseAstTypes(fields);
		WiseAstTypeEclass(__) : [t];
	});
}

wiseAstType2dotname(type : WiseAstType) -> string {
	switch (type) {
		WiseAstTypeI32() : "i32";
		WiseAstTypeI64() : "i64";
		WiseAstTypeF32() : "f32";
		WiseAstTypeF64() : "f64";
		WiseAstTypeFunc(tt, rt) : "fn_" + superglue(tt, wiseAstType2dotname, "-") + "--" + wiseAstType2dotname(rt);
		WiseAstTypeSIMD() : "v128";
		WiseAstTypeBool() : "b";
		WiseAstTypeString() : "s";
		WiseAstTypeTuple(fields) : "t_" + superglue(fields, wiseAstType2dotname, "-");
		WiseAstTypeEclass(id) : "e" + i2s(id);
	}
}

// extractDotFnName(v : WaseAst) -> string {
// 	/* switch (v) {
// 		DslNode(name, largs, pos) : {
// 			if (name == "var" && largs != []) {
// 				varName = getDslString(largs[0]);
// 				if (startsWith(varName, "dot")) varName else "";
// 			} else {
// 				"";
// 			}
// 		}
// 		default: "";
// 	} */""
// }

// isDotCallFn(v : WaseAst) -> bool {
// 	/* switch (v) {
// 		DslNode(name, largs, pos) : {
// 			name == "call"
// 			&& largs != []
// 			&& extractDotFnName(largs[0]) != "";
// 		}
// 		default: false;
// 	} */false
// }

// addDotNFunctions(fns : Set<WaseDotFn>, d : WaseAst) -> WaseAst {
// 	/* foldSet(fns, d, \acc, fn -> {
// 		returnType = elementAt(fn.argTypes, fn.index, DslList(makeList()));
// 		DslNode(
// 			"function",
// 			[
// 				DslString(fn.name),
// 				DslString(""), // export
// 				DslList(array2list(mapi(fn.argTypes, \i, argType -> DslNode(
// 					"idtype",
// 					[DslString("v" + i2s(i)), DslNode("type", [argType, argType], 0), argType],
// 					0
// 				)))),
// 				returnType,
// 				DslNode( // body
// 					"brace", 
// 					[
// 						DslList(makeList1(DslNode("var", [DslString("v" + i2s(fn.index)), returnType], 0))),
// 						returnType
// 					],
// 					0
// 				),
// 				acc, // scope
// 				DslList(makeList())],
// 			0
// 		)
// 	}); */d
// }

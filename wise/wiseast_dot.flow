import wise/wiseast_types;
import wise/wise_types;
import wase/wase_types;
import ds/set;
import text/blueprint;

export {

	makeWeTupleDotFn(e : WiExp, index : int, type : WiseAstType) -> WaseTupledotFn;
	WaseTupledotFn(
		value : WiExp,
		fn : WaseDotFn,
	);
	WaseDotFn(
		name : string,  // format : dot_type[_type]_index
		argTypes : [WiseAstType],
		index : int,
	);
	// isDotCallFn(v : WaseAst) -> bool;

	addDotNFunctionsToWase(fns : Set<WaseDotFn>, d : WaseAst) -> WaseAst;

}

makeWeTupleDotFn(e : WiExp, index : int, type : WiseAstType) -> WaseTupledotFn {
	types = extractTupleTypesFromWiseAstTypes([type]);
	dotFn = "dot_"
			+ superglue(types, wiseAstType2dotname, "_") + "_"
			+ (if (index >= 0) i2s(index) else "");
	value = WiCall(WiVar(dotFn, 0), [e], 0); // ? eclass
	WaseTupledotFn(
		value,
		WaseDotFn(dotFn, types, index)
	);
}

extractTupleTypesFromWiseAstTypes(types : [WiseAstType]) -> [WiseAstType] {
	mapConcat(types, \t -> switch (t : WiseAstType) {
		WiseAstTypeI32() : [t];
		WiseAstTypeI64() : [t];
		WiseAstTypeF32() : [t];
		WiseAstTypeF64() : [t];
		WiseAstTypeFunc(__, __) : [t];
		WiseAstTypeSIMD() : [t];
		WiseAstTypeBool() : [t];
		WiseAstTypeString() : [t];
		WiseAstTypeTuple(fields) : extractTupleTypesFromWiseAstTypes(fields);
		WiseAstTypeEclass(__) : [t];
	});
}

wiseAstType2dotname(type : WiseAstType) -> string {
	switch (type) {
		WiseAstTypeI32() : "i32";
		WiseAstTypeI64() : "i64";
		WiseAstTypeF32() : "f32";
		WiseAstTypeF64() : "f64";
		WiseAstTypeFunc(tt, rt) : "fn_" + superglue(tt, wiseAstType2dotname, "-") + "--" + wiseAstType2dotname(rt);
		WiseAstTypeSIMD() : "v128";
		WiseAstTypeBool() : "b";
		WiseAstTypeString() : "s";
		WiseAstTypeTuple(fields) : "t_" + superglue(fields, wiseAstType2dotname, "-");
		WiseAstTypeEclass(id) : "e" + i2s(id);
	}
}

// extractDotFnName(v : WaseAst) -> string {
// 	/* switch (v) {
// 		DslNode(name, largs, pos) : {
// 			if (name == "var" && largs != []) {
// 				varName = getDslString(largs[0]);
// 				if (startsWith(varName, "dot")) varName else "";
// 			} else {
// 				"";
// 			}
// 		}
// 		default: "";
// 	} */""
// }

// isDotCallFn(v : WaseAst) -> bool {
// 	/* switch (v) {
// 		DslNode(name, largs, pos) : {
// 			name == "call"
// 			&& largs != []
// 			&& extractDotFnName(largs[0]) != "";
// 		}
// 		default: false;
// 	} */false
// }

addDotNFunctionsToWase(fns : Set<WaseDotFn>, d : WaseAst) -> WaseAst {
	dotFns = foldSet(fns, WeWaseEmpty(), \acc : WeDecl, fn -> {
		types = map(fn.argTypes, wiseAstType2weType);
		returnType = elementAt(types, fn.index, WeType(""));
		WeFunction(
			fn.name,
			"", // optexport
			mapi(types, \i, argType -> WeIdtype("v" + i2s(i), argType)),
			[returnType],
			WeReturn(WeVar("v" + i2s(fn.index))),
			acc
		);
	});
	newValue = addFnToWaseAst(d, dotFns);
	if (newValue == d && !isEmptySet(fns)) println("ERROR: can't add the dot fns. Declaration is not found");
	newValue;
}

addFnToWaseAst(v : WaseAst, fns : WeDecl) -> WaseAst {
	setFns = \decl -> if (decl == WeWaseEmpty()) fns else decl;

	switch (v : WaseAst) {
		WeData(__, __, __, __, __) : WeData(v with decl = setFns(fns));
		WeFunction(__, __, __, __, __, __) : WeFunction(v with decl = setFns(fns));
		WeGlobal(__, __, __, __, __, __) : WeGlobal(v with decl = setFns(fns));
		WeImportFun(__, __, __, __, __) : WeImportFun(v with decl = setFns(fns));
		WeImportGlobal(__, __, __, __, __, __) : WeImportGlobal(v with decl = setFns(fns));
		WeImportMemory(__, __, __, __, __) : WeImportMemory(v with decl = setFns(fns));
		WeImportTable(__, __, __, __, __, __, __) : WeImportTable(v with decl = setFns(fns));
		WeMemory(__, __, __, __) : WeMemory(v with decl = setFns(fns));
		WeWaseInclude(__, __) : WeWaseInclude(v with decl = setFns(fns));
		default : v;
	}
}

wiseAstType2weType(type : WiseAstType) -> WeType {
	makeErrCode = \-> {
		println("Wrong type '" + toString(type) + "' in dotFn");
		""
	}
	code = switch (type) {
		WiseAstTypeI32() : "i32";
		WiseAstTypeI64() : "i64";
		WiseAstTypeF32() : "f32";
		WiseAstTypeF64() : "f64";
		WiseAstTypeFunc(tt, rt) : "i32";
		WiseAstTypeSIMD() : "v128";
		WiseAstTypeBool() : "i32";
		WiseAstTypeString() : "i32";
		WiseAstTypeTuple(fields) : makeErrCode();
		WiseAstTypeEclass(id) : makeErrCode();
	}
	WeType(code);
}
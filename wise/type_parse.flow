import wise/wise_parser;
import wise/wise_types;
import math/math;
import text/deserialize_string;
import text/gringo/gringo_typed_action;

export {
	// Does a typed parse of this wise program
	parseWise(program : string, onError : (string) -> void) -> WiseAst;
}

parseWise(program : string, onError : (string) -> void) -> WiseAst {
	gringoTypedParse(program, wiseTypeAction(onError), parse_wise, WiseAstList(makeList()), onError);
}

popWiseAstStack(a : List<WiseAst>, op : string) -> Pair<WiseAst, List<WiseAst>> {
	switch (a) {
		EmptyList(): {
			println("Stack underflow for " + op);
			Pair(WiseAstList(makeList()), a);
		}
		Cons(head, tailL): {
			Pair(head, tailL)
		}
	}
}

pushWiseAstValue(list : WiseAst, value : WiseAst) -> WiseAstList {
	switch (list) {
		WiseAstList(av): WiseAstList(Cons(value, av));
		default: {
			// Well, we drop whatever we had before
			WiseAstList(makeList1(value));
		}
	}
}

// This defines the semantic actions used in the grammar
wiseTypeAction(onError : (string) -> void) -> GringoAction<List<WiseAst>> {
	GringoAction(
		\acc : List<WiseAst>, v : string -> {
			if (v == "nil") {
				Cons(WiseAstList(makeList()), acc);
			} else if (v == "cons") {
				elm = popWiseAstStack(acc, v);
				list = popWiseAstStack(elm.second, v);
				narray = pushWiseAstValue(list.first, elm.first);
				Cons(narray, list.second);
			} else if (v == "swap") {
				top = popWiseAstStack(acc, v);
				other = popWiseAstStack(top.second, v);
				Cons(
					other.first, Cons(top.first, other.second)
				)
			} else if (v == "drop") {
				popWiseAstStack(acc, v).second;
			} else if (v == "true") {
				Cons(WiseAstBool(true), acc);
			} else if (v == "false") {
				Cons(WiseAstBool(false), acc);
			} else if (v == "s2i") {
				elm = popWiseAstStack(acc, v);
				Cons(WiseAstInt(s2i(getWiseAstString(elm.first))), elm.second);
			} else if (v == "s2d") {
				elm = popWiseAstStack(acc, v);
				Cons(WiseAstDouble(s2d(getWiseAstString(elm.first))), elm.second);
			} else if (v == "unescape") {
				elm = popWiseAstStack(acc, v);
				val = WiseAstString(deserializeString(getWiseAstString(elm.first)).first);
				Cons(val, elm.second);
			} else {
				// An AST node
				parts = splitWiseAstAction(v);
				name = parts.first;
				arity = parts.second;
				args : Pair<[WiseAst], List<WiseAst>> = fold(enumFromTo(1, arity), Pair([], acc), \acc2, arg -> {
					e = popWiseAstStack(acc2.second, v);
					Pair(concat([e.first], acc2.first), e.second)
				});
				// TODO: Fix this to have all the real names. We need to lookup from rule to flow type name
				val = makeStructValue("Wi" + name, args.first, IllegalStruct());
				Cons(val, args.second)
			}		
		},
		\acc : List<WiseAst>, m -> {
			Cons(WiseAstString(m), acc)
		}
	);
}

getWiseAstBool(w : WiseAst) -> bool {
	switch (w) {
		WiseAstBool(v): v;
		default: false;
	}
}

getWiseAstInt(w : WiseAst) -> int {
	switch (w) {
		WiseAstInt(v): v;
		default: 0;
	}
}

getWiseAstDouble(w : WiseAst) -> double {
	switch (w) {
		WiseAstDouble(v): v;
		default: 0.0;
	}
}

getWiseAstString(w : WiseAst) -> string {
	switch (w) {
		WiseAstString(v): v;
		default: "";
	}
}

getWiseAstList(w : WiseAst) -> List<WiseAst> {
	switch (w) {
		WiseAstList(l): l;
		default: makeList();
	}
}

/*
splitWiseAstAction(v : string) -> Pair<string, int> {
	parts = strSplit(v, "_");
	n = length(parts);
	if (n >= 2 && i2s(s2i(parts[n - 1])) == parts[n - 1]) {
		arity = s2i(parts[n - 1]);
		name = strGlue(subrange(parts, 0, n - 1), "_");
		Pair(name, arity)
	} else Pair(v, 0);
}
*/

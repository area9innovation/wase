import tools/dsl/dsl_typing;
import wase/type;

export {
	typeWise(ast : DslAst) -> DslAst;
}

WiseTypeAcc(
	// The depth of labels for break and continue resolution
	loops : ref [int],
);

typeWise(ast : DslAst) -> DslAst {
	deep = ref false;
	acc = makeDslTypeAcc(WiseTypeAcc(ref []), mergeWiseTypes, \a, n, g -> typecheckWise(a, ^deep, n, g), unifyWiseType);

	// OK, first time, we do NOT go deep, but just grab the top-level names
	dslTypeInfer(acc, ast, false) |> ignore;

//	println(getTreeKeys(^(acc.env)));
//	println(getTreeValues(^(acc.env)));

	// Then go again, but this time deep and we resolve the final type
	deep := true;
	dslTypeInfer(acc, ast, true);
}

mergeWiseTypes(acc : DslTypeAcc<WiseTypeAcc>, left : DslAst, right : DslAst) -> DslAst {
	mergeWaseTypes(acc, left, right);
}

typecheckWise(acc : DslTypeAcc<WiseTypeAcc>, deep : bool, node : DslAst, getChildType : (int) -> DslAst) -> DslAst {
	switch (node) {
		DslBool(__): DslString("bool");
		DslNode(name, args, pos): {
			if (name == "equal" || name == "not_equal" || name == "less_equal" || name == "less"
				|| name == "greater_equal" || name == "greater"
				|| name == "less_equalu" || name == "lessu"
				|| name == "greater_equalu" || name == "greateru"
				) {
				// Comparisons give bools in Wise
				left = getChildType(0);
				right = getChildType(1);
				acc.unifyTypes(acc, left, right);
				DslString("bool");
			} else if (name == "true" || name == "false") {
				DslString("bool");

			} else if (name == "ifelse") {
				cond = getChildType(0);
				acc.unifyTypes(acc, cond, DslString("bool"));

				blockType = makeDslTypeVar(acc);
				preBlocks = ^(acc.blocks);
				acc.blocks := arrayPush(preBlocks, blockType);

				thenType = getChildType(1);
				elseType = getChildType(2);
				acc.unifyTypes(acc, thenType, elseType);
				acc.unifyTypes(acc, blockType, thenType);

				acc.blocks := preBlocks;

				blockType;
			} else if (name == "if") {
				cond = getChildType(0);
				acc.unifyTypes(acc, cond, DslString("bool"));

				blockType = DslList(makeList());
				preBlocks = ^(acc.blocks);
				acc.blocks := arrayPush(preBlocks, blockType);

				thenType = getChildType(1);

				acc.unifyTypes(acc, thenType, blockType);
				acc.blocks := preBlocks;

				blockType;
			} else if (name == "bool_or" || name == "bool_and") {
				left = getChildType(0);
				right = getChildType(1);
				acc.unifyTypes(acc, left, DslString("bool"));
				acc.unifyTypes(acc, right, DslString("bool"));
				DslString("bool");
			} else if (name == "while") {
				// Handle block types so we can 
				// record where "break" and "continue" should refer to 
				// so we can translate break and continue correctly
				blockType = DslList(makeList());

				preBlocks = ^(acc.blocks);
				acc.blocks := arrayPush(preBlocks, blockType);

				blockDepth = length(preBlocks) + 1;
				preLoops = ^(acc.cookie.loops);
				acc.cookie.loops := arrayPush(preLoops, blockDepth);

				cond = getChildType(0);
				body = getChildType(1);
				acc.unifyTypes(acc, cond, DslString("bool"));

				acc.blocks := preBlocks;
				acc.cookie.loops := preLoops;

				// The result is always void
				blockType;
			} else if (name == "break" || name == "continue") {
				preLoops = ^(acc.cookie.loops);
				if (preLoops == []) {
					acc.onError(node, name + " only valid inside while");
				}

				// The result is does not have any info
				makeDslTypeVar(acc);
			} else if (name == "tuple") {
				getChildType(0);

			} else if (name == "tupledot") {
				res = makeDslTypeVar(acc);
				// This is a list
				val0 = getChildType(0);
				// TODO: ?? reverse only if it is a fn arg
				/* val = switch (val0 : DslAst) {
					DslBool(__) : val0;
					DslInt(__) : val0;
					DslDouble(__) : val0;
					DslString(__) : val0;
					DslList(l) : DslList(reverseList(colcatLists(l)));
					DslNode(__, __, __) : val0;
				}; */
				ttypes = getDslTupleTypes(val0);
				index = getDslInt(args[1]);
				val = ttypes[length(ttypes) - index - 1];
				// tupledottype(val, index, res)
				acc.unifyTypes(acc, val, DslNode("tupledottype", [val, args[1], res], pos));
				res;

			} else if (name == "import") {
				// Wise:
				// "import" ws id ":" ws optmutable type $"swap" "=" ws id "." id ";" ws decl $"import_6" // id, type, mutable, module, name, scope

				// Wase:
				// "import" ws id ":" ws optmutable type $"swap" "=" ws id "." id ";" ws decl $"import_global_6" // id, type, mutable, module, name, scope
				// "import" ws id ":" ws fntype "=" ws id "." id ";" ws decl $"import_fun_5"; // id type module name scope
				
				// id type mutable module name scope
				gname = getDslString(args[0]);
				type = getChildType(1);

				if (getDslNode(type).name != "func") {
					// Global
					isMutable = getDslInt(args[2]);

					if (isMutable == 0) {
						// Record that this is NOT mutable
						acc.constants := insertSet(^(acc.constants), gname);
					}
				}

				if (!deep && containsKeyTree(^(acc.env), gname)) {
					acc.onError(node, "import '" + gname + "' is duplicate");
				}

				// OK, record the import type
				acc.env := setTree(^(acc.env), gname, type);
				getChildType(5);

			} else {
				// OK, we just reuse typing from Wase
				typecheckWase(acc, deep, node, getChildType);
			}
		}
		default: {/* println("DEF "+toString(node));  */typecheckWase(acc, deep, node, getChildType);}
	}
}

unifyWiseType(acc : DslTypeAcc<WiseTypeAcc>, left : DslAst, right : DslAst) -> bool {
	switch (left) {
		DslList(lvalue): {
			switch (right) {
				DslNode(rname, rargs, __): {
					if (rname == "tupledottype") {
						// tupledottype(val, index, res)
						ttypes = getDslTupleTypes(left);
		
						index = getDslInt(rargs[1]);
						// Extract the tuple index type
						acc.unifyTypes(acc, ttypes[length(ttypes) - index - 1], rargs[2]);

						// And set the tuple to the list
						acc.unifyTypes(acc, left, rargs[0]);

						true;
					} else false;
				}
				default: false;
			}
		}
		DslNode(lname, largs, __): {
			switch (right) {
				DslList(rvalue): unifyWiseType(acc, right, left);
				DslNode(rname, rargs, __): {
					println("TODO: Unify " + prettyDsl(left) + " vs " + prettyDsl(right));
					false;
				}
				default: false;
			}
		}
		default: false;
	}
}

// only for tests
colcatLists(l : List<DslAst>) -> List<DslAst> {
	switch (l : List<DslAst>) {
		EmptyList(): EmptyList();
		Cons(h, t): switch (h : DslAst) {
			DslList(hl) : colcatLists(concatList(hl, t));
			default : Cons(h, colcatLists(t));
		}
	}
}
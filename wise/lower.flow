import tools/dsl/dsl_ast;
import ds/array;
import runtime;
import wase/compile;
import wise/wise_dot;

export {
	makeLowerWiseEnv(onError : (DslAst, string) -> void) -> LowerWiseEnv;

	lowerWise2Wase(acc : LowerWiseEnv, d : DslAst) -> DslAst;
}

LowerWiseEnv(
	blocks : int,
	loops : [int],
	locals : Set<string>,
	dots : ref Set<DslDotFn>,
	onError : (DslAst, string) -> void, 
);

makeLowerWiseEnv(onError : (DslAst, string) -> void) -> LowerWiseEnv {
	LowerWiseEnv(
		0, [], makeSet(), ref makeSet(), onError
	);
}

extractVarInfo(arg : DslNode, indexes : [int]) -> Maybe<Triple<string, DslAst, [int]>> {
	if (arg.name == "var") {
		if (length(arg.args) >= 2) {
			Some(Triple(getDslString(arg.args[0]), arg.args[1], indexes));
		} else {
			None();
		}
	} else if (arg.name == "tupledot") {
		extractVarInfo(getDslNode(arg.args[0]), concat([getDslInt(arg.args[1])], indexes));
	} else {
		None();
	}
}

fieldPath2index(route : [int], types : DslAst, acc : int) -> int {
	if (route == []) {
		acc;
	} else {
		pathLength = ref -1;
		foundItem = findItemInDslAst(types, [], \itemPath, item -> {
			pathLength := ^pathLength + 1;
			itemPath == route;
		});
		if (foundItem) ^pathLength else -1;
	}
}

// todo: tail recursion
findItemInDslAst(v : DslAst, route : [int], fn : ([int], DslAst) -> bool) -> bool {
	switch (v : DslAst) {
		DslBool(__) : fn(route, v);
		DslInt(__) : fn(route, v);
		DslDouble(__) : fn(route, v);
		DslString(__) : fn(route, v);
		DslList(l) : foldiList(l, false, \i, acc, item ->
			acc || findItemInDslAst(item, arrayPush(route, i), fn)
		);
		DslNode(__, __, __) : fn(route, v);
	}
}

tupledot2DslAst(env : LowerWiseEnv, d : DslNode) -> DslAst {
	arg = getDslNode(d.args[0]);
	makeDefExp = \ -> {
		largs = map(d.args, \a -> lowerWise2Wase(env, a));
		value = largs[0];
		varType = wiseType(value);
		switch (varType) {
			DslList(t): {
				types = getDslTupleTypes(varType);
				dot = makeDotFn(largs[0], largs[1], orderDotFnTypes(arg, types), d.pos);
				env.dots := insertSet(^(env.dots), dot.fn);
				dot.value;
			}
			default: {
				env.onError(d, ". only for tuples " + prettyDsl(varType));
				d;
			}
		}
	}
	// TODO: call().field.field
	if (arg.name == "var" || arg.name == "tupledot") {
		eitherFn(
			if (arg.name == "var") extractVarInfo(d, []) else extractVarInfo(arg, [getDslInt(d.args[1])]),
			untripleC(\varName, types, path -> {
				index = fieldPath2index(path, types, -1);
				if (index > -1) {
					DslNode("var", [DslString(varName + "." + i2s(index))], d.pos);
				} else {
					env.onError(d, "wrong index of tuple " + prettyDsl(d));
					d;
				}
			}),
			makeDefExp
		)
	} else {
		makeDefExp()
	}
}

// TODO: think about the order
// example : 
// Tuple(i32, f64);
// makeTuple() -> Tuple;
// Tuple(1, 1.1) == [f64, i32]
// makeTuple() == [i32, f64]
orderDotFnTypes(node : DslNode, types : [DslAst]) -> [DslAst] {
	if (node.name == "tuple") {
		// tuples have reversed types
		reverseA(types)
	} else {
		types;
	}
}

lowerWise2Wase(env : LowerWiseEnv, d : DslAst) -> DslAst {
	list2 = \l, r -> DslList(Cons(r, Cons(l, makeList())));
	switch (d) {
		DslBool(value): d;
		DslInt(value): d;
		DslDouble(value): d;
		DslString(value): d;
		DslList(value): DslList(mapList(value, \v -> lowerWise2Wase(env, v)));
		DslNode(name, args, pos): {
			if (name == "while") {
				nenv = LowerWiseEnv(env with blocks = env.blocks + 2, loops = arrayPush(env.loops, env.blocks));
				largs = map(args, \a -> lowerWise2Wase(nenv, a));
				// while (cond) { <exp> } =>
				// block { loop { break_if<2>(!cond); <exp>; break<>() } }
				// cond, exp, type = void
				l = DslNode("block", [
					DslList(makeList1(
					DslNode("loop", [
						DslList(
							fold([
								DslNode("wasm_op", [DslString("break_if"), DslInt(1), negateWise(largs[0]),DslList(makeList())], pos),
								largs[1],
								DslNode("wasm_op", [DslString("break"), DslList(makeList()), DslList(makeList()), DslList(makeList())], pos),
							], makeList(), \acc, e -> Cons(e, acc))
						), largs[2]
					], pos))), 
					DslList(makeList())
				], pos);
				// println(l);
				l;
			} else if (name == "call") {
				fn = getDslNode(args[0]);
				indirect = \ -> {
					// Indirect call
					// This is the id of the fn to call
					fncall = lowerWise2Wase(env, args[0]); 
					fnargs = getDslList(lowerWise2Wase(env, args[1]));
					withFn = DslList(Cons(fncall, fnargs));

					// OK, turn this into a func ref
					ic = DslNode("wasm_op", [DslString("call_indirect"), DslList(makeList()), withFn, lowerWiseType(lowerWise2Wase(env, args[2]))], pos);
					// println(prettyDsl(ic));
					ic;
				};
				if (fn.name == "var") {
					cname = getDslString(fn.args[0]);
					if (containsSet(env.locals, cname)) {
						indirect();
					} else {
						// Direct call - do not lower the var, but keep as is
						arg = lowerWise2Wase(env, args[1]);
						DslNode(name, [args[0], arg, lowerWiseType(lowerWise2Wase(env, args[2]))], pos);
					}
				} else {
					indirect();
				}
			} else if (name == "ifelse") {
				// TODO: What about bool_or and bool_and?
				nenv = LowerWiseEnv(env with blocks = env.blocks + 1);
				largs = map(args, \a -> lowerWise2Wase(nenv, a));
				DslNode(name, lowerWiseExpType(largs), pos);
			} else if (name == "if") {
				// TODO: What about bool_or and bool_and?
				nenv = LowerWiseEnv(env with blocks = env.blocks + 1);
				largs = map(args, \a -> lowerWise2Wase(nenv, a));
				DslNode(name, lowerWiseExpType(largs), pos);
			} else if (name == "let") {
				// (id, mut, type, exp, body, bodytype)
				id = getDslString(args[0]);
				largs = mapi(args, \i, a -> {
					nenv = if (i == 4) {
						// Mark this var as local in the environment
						LowerWiseEnv(env with locals = insertSet(env.locals, id))
					} else env;
					t = lowerWise2Wase(nenv, a);
					if (i == 2) lowerWiseExplicitType(t)
					else if (i == 5) lowerWiseType(t) 
					else t
				});

				if (isDotCallFn(largs[3])) {
					DslNode(name, largs, pos);
				} else {
					varType = wiseType(largs[3]);
					switch (varType) {
						DslList(t): {
							// OK, a tuple-let
							// types are reversed
							DslNode("lettuple", [largs[0], largs[1], unrollWiseTuple(DslList(getDslList(largs[2]))), largs[3], largs[4], largs[5]], pos);
						}
						default: {
							DslNode(name, largs, pos);
						}
					}
				}
			} else if (name == "tupledot") {
				tupledot2DslAst(env, d);
			} else {

				// Those that do not affect the lowering environment

				largs = map(args, \a -> lowerWise2Wase(env, a));
				if (name == "function") {
				// function(id, export : bool, args : [idtype(id, type)], [returnTypes], body, scope)
					DslNode("function", [largs[0], largs[1], largs[2], wiseType(largs[3]), largs[4], largs[5], largs[6]], pos);
				} else if (name == "true") {
					DslNode("int", [DslInt(1), DslString("i32")], pos);
				} else if (name == "false") {
					DslNode("int", [DslInt(0), DslString("i32")], pos);
				} else if (name == "bool_or") {
					// Make this short-circuit
					// if (a) 1 else b
					// TODO: If a does not have side-effects, we can do a bitwise or
					DslNode("ifelse", [largs[0], DslInt(1), largs[1], DslString("i32")], pos);
				} else if (name == "bool_and") {
					// Make this short-circuit
					// if (a) b else 0
					// TODO: If a does not have side-effects, we can do a bitwise and
					DslNode("ifelse", [largs[0], largs[1], DslInt(0), DslString("i32")], pos);
				} else if (name == "break") {
					depth = (env.blocks - 1) - (if (env.loops == []) {
						env.onError(d, "break only in while");
						0;
					} else lastElement(env.loops, 0));
					DslNode("wasm_op", [DslString("break"), DslList(makeList1(DslInt(depth))), DslList(makeList()), largs[0]], pos);
				} else if (name == "continue") {
					depth = (env.blocks - 2) - (if (env.loops == []) {
						env.onError(d, "continue only in while");
						0;
					} else lastElement(env.loops, 0));
					DslNode("wasm_op", [DslString("break"), DslList(makeList1(DslInt(depth))), DslList(makeList()), largs[0]], pos);
				} else if (name == "import") {
					if (getDslNode(largs[1]).name == "fntype") {
						DslNode("import_fun", [largs[0], largs[1], largs[3], largs[4], largs[5], largs[6]], pos)
					} else {
						DslNode("import_global", largs, pos)
					}
				} else if (name == "and" || name == "or" || name == "xor") {
					// OK, check that the type is integer
					type = wiseType(d);
					if (type != DslString("i32") && type != DslString("i64")) {
						env.onError(d, "bitwise operation only works on i32 and i64");
					}
					DslNode(name, largs, pos);
				} else if (name == "equal" || name == "not_equal" || name == "less_equal" || name == "less"
					|| name == "greater_equal" || name == "greater") {
					// The type becomes int
					DslNode(name, [largs[0], largs[1], DslString("i32")], pos)
				} else if (name == "less_equalu") {
					DslNode("wasm_op", [DslString("le_u"), DslList(makeList()), list2(largs[0], largs[1]), DslString("i32")], pos)
				} else if (name == "lessu") {
					DslNode("wasm_op", [DslString("lt_u"), DslList(makeList()), list2(largs[0], largs[1]), DslString("i32")], pos)
				} else if (name == "greater_equalu") {
					DslNode("wasm_op", [DslString("ge_u"), DslList(makeList()), list2(largs[0], largs[1]), DslString("i32")], pos)
				} else if (name == "greateru") {
					DslNode("wasm_op", [DslString("gt_u"), DslList(makeList()), list2(largs[0], largs[1]), DslString("i32")], pos)
				} else if (name == "var") {
					id = getDslString(largs[0]);
					type = wiseType(d);
					if (getDslNode(type).name == "func" && !containsSet(env.locals, id)) {
						// OK, turn this into a func ref
						DslNode("wasm_op", [DslString("fn"), DslList(makeList1(largs[0])), DslList(makeList()), DslString("i32")], pos);
					} else {
						switch (type) {
							DslList(tt): {
								// OK, a tuple. We have to expand this to a tuple constructor
								tup = DslList(
									reverseList(
										deepMapiDslAst(tt, 0, \i, t -> {
											DslNode("var", [DslString(id + "." + i2s(i)), t], pos)
										})
									)
									);
								// println("TODO: Expand " + id + " : "  + prettyDsl(type) + " to tuple constructor " + prettyDsl(tup));
								tup;
							}
							default: DslNode(name, lowerWiseExpType(largs), pos);
						}

					}
				} else if (name == "tuple") {
					largs[0];

				} else {
					type = lastElement(args, d);
					if (type == DslString("bool")) {
						println("Figure out how to get rid of bool type when lowering: " + prettyDsl(d));
					}
					DslNode(name, largs, pos);
				}
			}
		}
	}
}

deepMapiDslAst(l : List<DslAst>, i : int, fn : (int, DslAst) -> ??) -> List<??> {
	switch (l : List<DslAst>) {
		EmptyList(): EmptyList();
		Cons(h, t): switch (h : DslAst) {
			DslList(l2) : deepMapiDslAst(concatList(l2, t), i, fn);
			default : Cons(fn(i, h), deepMapiDslAst(t, i + 1, fn));
		}
	}
}

negateWise(d : DslAst) -> DslAst {
	n = getDslNode(d);
	name = n.name;
	flip = \nn -> DslNode(nn, n.args, n.pos);
	if (name == "equal") flip("not_equal")
	else if (name == "not_equal") flip("equal")
	else if (name == "less_equal") flip("greater")
	else if (name == "less") flip("greater_equal")
	else if (name == "greater_equal") flip("less")
	else if (name == "greater") flip("less_equal")
	else if (name == "bool_not") n.args[0]
	else {
		DslNode("bool_not", [d, DslString("bool")], n.pos);
	}
}

// For expressions, lower the last argument to a Wase type
lowerWiseExpType(args : [DslAst]) -> [DslAst] {
	typepos = length(args) - 1;
	replace(args, typepos, lowerWiseType(args[typepos]));
}

// Lower an inferred type to Wase land
lowerWiseType(d : DslAst) -> DslAst {
	node = getDslNode(d);
	if (node.name == "func") DslString("i32")
	else if (node.name == "bool") {
		println("TODO: This bool is not expected");
		DslString("i32");
	} else {
		switch (d) {
			DslList(l): unrollWiseTuple(d);
			default: d;
		}
	}
}

// Type annotations lower them to Wase land
lowerWiseExplicitType(d : DslAst) -> DslAst {
	switch (d) {
		DslNode(name, args, pos): {
			if (name == "fntype") {
				DslNode("type", [DslString("i32"), DslString("i32")], pos)
			} else if (name == "type") {
				// Check if it is inferred
				if (getDslString(args[0]) == "auto") {
					childType = lowerWiseType(args[1]);
					switch (childType) {
						DslList(tt): DslList(reverseList(tt));
						default: DslNode(name, [childType], pos)
					}
				} else d;
			} else d;
		}
		default: {
			d;
		}
	}
}

wiseType(d : DslAst) -> DslAst {
	switch (d) {
		DslList(t): {
			r = DslList(mapList(t, wiseType));
			unrollWiseTuple(r);
		}
		DslNode(n, args, __): {
			type = waseType(d);
			type;
		}
		default: waseType(d);
	}
}

unrollWiseTuple(d : DslList) -> DslList {
	DslList(reverseList(doUnrollWiseTuple(makeList(), d.value)));
}
 
doUnrollWiseTuple(acc : List<DslAst>, d : List<DslAst>) -> List<DslAst> {
	foldList(d, acc, \acc2 : List<DslAst>, v : DslAst -> {
		switch (v) {
			DslList(rl): doUnrollWiseTuple(acc2, rl);
			default: Cons(v, acc2)
		}
	})
}

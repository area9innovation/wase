import wise/parse;
import tools/dsl/dsl_include;

import wise/wise_parser;
import wise/wise_types2dsl;
import wise/wise_parse_typed;
import text/gringo/gringo_typed_action;


import wise/type;
import wise/lower;
import wase/compile;
import wase/pretty_wase;
import wise/wise_template;
import wase/wase_types2dsl;
import wise/lower_typed;

compileWise2File(includes : [string], filename : string, code : string, outputPath : string) -> Promise<int, string> {
	Promise(\onDone : (int) -> void, onError : (string) -> void -> {
		println("\nCompiling '" + filename + "'");

		// Do a typed parse/conversion
		if (false) {
			ast = gringoTypedParse(code, dslAction, parse_wise, DslList(makeList()), onError);
			t = dslAst2WiseAst(ast);
			ast2 = wiseAst2DslAst(t);
			if (ast != ast2) {
				println("Conversion did not work!");
				println(prettyDsl(ast));
				println(prettyDsl(ast2));
			}
			println("Parsing worked");
			println(t);
		}

		gringoParser = !isUrlParameterFalse("gringo");

		combinedProgram = if (gringoParser) {
			program = parseWiDecl(code, \err -> println("Error in '" + filename + "': " + err));
			// TODO: don't use transformations (wise->dsl->wise->...)
			dslProgram = wiseAst2DslAst(program);
			include = DslInclude(includes, [".wise"], "wise_include", "wase_empty", \path, file, content -> {
				wiProgram = parseWiDecl(content, \err -> println("Error in '" + path + "': " + err));
				// TODO: don't use transformations
				wiseAst2DslAst(wiProgram)
			}, ref makeSet());
			processDslIncludes(include, dslProgram);
		} else {
			program = parseWise(filename, code);
			include = DslInclude(includes, [".wise"], "wise_include", "wase_empty", \path, file, content -> {
				parseWise(path, content);
			}, ref makeSet());
			processDslIncludes(include, program);
		}

		extended = decomposePolyWise2(combinedProgram);

		// Here, we should lower Wise constructs to Wase constructs
		lowered0 = if (gringoParser) {
			// lowered -> typed . TODO: typed -> lowered?
			// TODO: don't use transformations (dsl->wise->...; waseast->dsl->...)
// println("extended: "+toString(extended));
			wiseProgram = dslAst2WiseAst(extended);
// println("from DSL: "+toString(wiseProgram));
			typeEnv = makeTypeWiseAstState(\ast, error -> println(error + " at: " + toString(ast)));
			checkedTypes = typeWiseAst(typeEnv, wiseProgram);
println("			typedWise: \n"+toString(checkedTypes));
			loweredTuples = lowerTuplesInWiseAst(checkedTypes, typeEnv.unionFindMap, ref 0);
println("			loweredTuples: \n"+toString(loweredTuples));
			checkedLoweredTypes = typeWiseAst(typeEnv, loweredTuples);
println("			TYPED loweredTuples: \n"+toString(checkedLoweredTypes));
// 			typedWise = resolveWiseAst(typeEnv.unionFindMap, checkedTypes, typeEnv.onError);
// println("Resolved: ");
			dots  = ref makeSet();
			loweredWase = lowerWiseAst2WaseAst(checkedLoweredTypes/* checkedTypes */, typeEnv, dots);
println("			LOWERED WISE: \n"+toString(loweredWase));
			waseCode = addDotNFunctionsToWase(^dots, loweredWase);
			// TODO: WaseAst2Wase
			loweredAst = waseAst2DslAst(waseCode);
println("			LOWERED AST: \n"+toString(loweredAst));
			// typeWise makes type duplicates(?) what necessary for dsl2wase
			// waseAst2DslAst doesn't have the real types. We have to fix it
			// auto == () doesn't work. greate = bool type (should be int)
println("			CHECKED TYPE\n");
			typeWase(loweredAst); // TODO: delete
		} else {
			// typed -> lowered
			typed = typeWise(extended);
			if (isUrlParameterTrue("debug-type")) {
				println("Typed '" + filename + "'':");
				println(prettyDsl(typed));
			}
			env = makeLowerWiseEnv(\node, error -> {
				println(error + " at " + summarizeDsl(node));
			});
println("TYPED AST: \n"+toString(typed));
println("LWD AST: v"+toString(lowerWise2Wase(env, typed)));
			// add dot* functions
			addDotNFunctions(^(env.dots), lowerWise2Wase(env, typed));
		}

		// Add exported memory
		lowered = DslNode("memory", [DslInt(1), DslInt(1), DslList(makeList()), lowered0], 0);

		if (isUrlParameterTrue("debug-lower")) {
			println("Wase '" + filename + "'':");
			println(prettyDsl(lowered));
		}

		wase = dsl2wase(\node, error -> {
			println(filename + ": " + error)
		}, lowered);

		if (isUrlParameterTrue("debug-wase")) {
			println("\nAs wase:");
			println(prettyWase(wase));
		}
println("\n"+toString(wase));
		wasm = wase2wasm(wase);
		bytes = wasmModule2bytes(wasm);

		filebase = changeFileExt(pathCombine(outputPath, fileNameOnly(filename)), "");
		ok = setFileContentBytes(filebase + ".wasm", 
			fold(bytes, "", \acc, byte -> {
				acc + fromCharCode(byte)
			})
		);
		if (ok) {
			println("  '" + filebase + ".wasm' saved");
			if (isUrlParameterTrue("wat")) {
				args = concat([
						filebase + ".wasm", "-o", filebase + ".wat",
						//"--enable-all", 
					], if (isUrlParameterTrue("no-check")) ["--no-check"] else [],
				);
				startProcess("wasm2wat", args, ".", "", \ec : int, so, se -> {
					if (ec == 0) {
						println("  '" + filebase + ".wat' generated");
						onDone(ec);
					} else {
						onError(filename + ":\n" + so + se);
					}
				});
			} else onDone(0);
		} else {
			onError("Could not save " + filebase + ".wasm saved")
		}
	});
}

main() {
	includes = strSplit(getUrlParameter("I"), ",");
	files0 = filtermap(getAllUrlParametersArray(), \a -> if (a[1] == "") Some(Pair(changeFileExt(a[0], ".wise"), dirName(a[0]))) else None());
	files = if (files0 != []) files0 else {
		if (isUrlParameterTrue("test")) {
			test = getUrlParameter("test");
			testFolder = if (test == "1") Pair("tests", "tests/wise") else Pair(test, test);
			tests = readDirectory(testFolder.first);
			filtermap(tests, \t -> if (endsWith(t, ".wise")) Some(Pair(pathCombine(testFolder.first, t), testFolder.second)) else None());
		} else [Pair("tests/print.wise", "tests/wise")];
	}
	if (files == []) {
		printWiseHelp();
		quit(1);
	} else {
		compiles : [Promise<int, string>]= map(files, unpairC(\file0, outPath -> {
			file = resolveDslFile(includes, file0);
			if (fileExists(file)) {
				compileWise2File(includes, file, getFileContent(file), resolveDslFile(includes, outPath))
			} else {
				Promise(\__, onError -> onError(file0 + " not found"));
			}
		}));
		all : Promise<[int], string> = allP(compiles);
		doneP(all, \__ -> quit(0), \error -> {
			println(error);
			quit(1);
		});
	}
}

printWiseHelp() -> void {
	println("wise <files> - Compiles the files to <file>.wasm files");
	println("  I=<path>,...   Defines the include path for resolving .wise files and includes");
	println("");
	println("  wat=1          Produce .wat disassembly using wasm2wat");
	println("");
	println("  verbose=1      Print how includes are resolved to files");
	println("");
	println("  test=1         Compiles all test cases in the tests/ folder");
	println("  debug-type=1   Output the resulting typed AST");
	println("  debug-wase=1   Output the internal intermediate Wase representation");
}

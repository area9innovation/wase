import wise/wiseast_types;
import wise/wise_types;
import ds/arrayutils;
import ds/union_find_map;

export {

	wiseAstType2wiType(t : WiseAstType, eclass : int, unionFindMap : UnionFindMap<[WiseAstType]>) -> WiType;
	getWaseInstructionResultType(id : string, args : [WiseAstType], defType : WiseAstType, resType : Maybe<WiseAstType>) -> WiseAstType;
	extractWiExpFromWiseAst(e : WiseAst) -> WiExp;
}


wiseAstType2wiType(t : WiseAstType, eclass : int, unionFindMap : UnionFindMap<[WiseAstType]>) -> WiType {
	getTypeWithEclass = \ -> {
		typesWithClasses = getUnionMapValue(unionFindMap, eclass);
		if (typesWithClasses == []) WiseAstTypeEclass(0) else typesWithClasses[0];
	}
	switch (t : WiseAstType) {
		WiseAstTypeI32() : WiBasictype("i32", eclass);
		WiseAstTypeI64() : WiBasictype("i64", eclass);
		WiseAstTypeF32() : WiBasictype("f32", eclass);
		WiseAstTypeF64() : WiBasictype("f64", eclass);
		WiseAstTypeFunc(tt, rt) : {
			typeWithClasses = getTypeWithEclass();
			fieldClasses = switch (typeWithClasses : WiseAstType) {
				WiseAstTypeFunc(tt2, rt2) : {
					if (length(tt) != length(tt2)) {
						println("Error : Can't fix eclasses. Wrong function type. Given : " + toString(t) + ". Found : " + toString(typeWithClasses));
					}
					Pair(mapi(tt, \i, f -> elementAtMap(tt2, i, extractEclassFromWiseAstType, 0)), extractEclassFromWiseAstType(rt2));
				}
				default : {
					println("Error : Can't fix eclasses. not a function type. Given : " + toString(t) + ". Found : " + toString(typeWithClasses));
					Pair(map(tt, \__ -> 0), 0);
				}
			}
			WiFntype(
				mapi(tt, \i, at -> wiseAstType2wiType(at, fieldClasses.first[i], unionFindMap)),
				wiseAstType2wiType(rt, fieldClasses.second, unionFindMap),
				eclass
			);
		}
		WiseAstTypeSIMD() : WiBasictype("v128", eclass);
		WiseAstTypeBool() : WiBasictype("i32", eclass);
		WiseAstTypeString() : WiBasictype("i32", eclass);
		WiseAstTypeTuple(fields) : {
			typeWithClasses = getTypeWithEclass();
			fieldClasses = switch (typeWithClasses : WiseAstType) {
				WiseAstTypeTuple(fields2) : {
					if (length(fields) != length(fields2)) {
						println("Error : Can't resolve eclasses. Wrong tuple type. Given : " + toString(t) + ". Found : " + toString(typeWithClasses));
					}
					mapi(fields, \i, f -> elementAtMap(fields2, i, extractEclassFromWiseAstType, 0));
				}
				default : {
					println("Error : Can't resolve eclasses. not a tuple type. Given : " + toString(t) + ". Found : " + toString(typeWithClasses));
					map(fields, \__ -> 0);
				}
			}
			WiTupletype(
				mapi(fields, \i, ft -> wiseAstType2wiType(ft, fieldClasses[i], unionFindMap)),
				eclass
			);
		}
		WiseAstTypeEclass(id) : WiBasictype("", id);
	}
}

extractEclassFromWiseAstType(t : WiseAstType) -> int {
	switch (t : WiseAstType) {
		WiseAstTypeI32() : 0;
		WiseAstTypeI64() : 0;
		WiseAstTypeF32() : 0;
		WiseAstTypeF64() : 0;
		WiseAstTypeFunc(__, __) : 0;
		WiseAstTypeSIMD() : 0;
		WiseAstTypeBool() : 0;
		WiseAstTypeString() : 0;
		WiseAstTypeTuple(__) : 0;
		WiseAstTypeEclass(id) : id;
	}
}

// the list of types : https://webassembly.github.io/spec/core/appendix/index-instructions.html
getWaseInstructionResultType(id : string, args : [WiseAstType], defType : WiseAstType, resType : Maybe<WiseAstType>) -> WiseAstType {
	voidType = WiseAstTypeTuple([]);
	if (id == "store" || id == "store8" || id == "store16" || id == "store32") {
		if (length(args) == 2) voidType else defType;
	} else if (id == "load" || id == "load8_s" || id == "load8_u" || id == "load16_s" || id == "load16_u" || id == "load32_s" || id == "load32_u") {
		knownResType = maybeBind(resType, \t -> if (t == WiseAstTypeI64() || t == WiseAstTypeI32() || t == WiseAstTypeF64() || t == WiseAstTypeF32() || t == WiseAstTypeSIMD()) Some(t) else None());
		either(knownResType, defType);
	} else if (id == "trunc") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeF64()) WiseAstTypeF64()
		else if (args[0] == WiseAstTypeF32()) WiseAstTypeF32()
		else defType;
	} else if (id == "trunc_s" || id == "trunc_u" || id == "trunc_sat_s" || id == "trunc_sat_u") { 
		knownResType = maybeBind(resType, \t -> if (t == WiseAstTypeI64() || t == WiseAstTypeI32()) Some(t) else None());
		if (args == []) defType
		else if (args[0] == WiseAstTypeF64()) either(knownResType, WiseAstTypeI64())
		else if (args[0] == WiseAstTypeF32()) either(knownResType, WiseAstTypeI32())
		else defType;
	} else if (id == "wrap") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI32()
		else defType;
 	} else if (id == "clz" || id == "ctz") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else defType;
	} else if (id == "popcnt") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else if (args[0] == WiseAstTypeSIMD()) WiseAstTypeSIMD()
		else defType;
	} else if (id == "shl" || id == "shr_s" || id == "shr_u") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else if (args[0] == WiseAstTypeSIMD()) WiseAstTypeSIMD()
		else defType;
	} else if (id == "rotl" || id == "rotr") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else defType;
	} else if (id == "eqz" || id == "eq") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else defType;
	} else if (id == "div") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeF32()) WiseAstTypeF32()
		else if (args[0] == WiseAstTypeF64()) WiseAstTypeF64()
		else defType;
	} else if (id == "div_u" || id == "div_s") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else defType;
	} else if (id == "rem_u" || id == "rem_s") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else defType;
	} else if (id == "extend_s" || id == "extend_u") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI64()
		else defType;
	} else if (id == "extend8_s" || id == "extend16_s") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else defType;
	} else if (id == "i16x8.extend_low_i8x16_s" || id == "i16x8.extend_high_i8x16_s" || id == "i16x8.extend_low_i8x16_u" || id == "i16x8.extend_high_i8x16_u"
				|| id == "i32x4.extend_low_i16x8_s" || id == "i32x4.extend_high_i16x8_s" || id == "i32x4.extend_low_i16x8_u" || id == "i32x4.extend_high_i16x8_u"
				|| id == "i64x2.extend_low_i32x4_s" || id == "i64x2.extend_high_i32x4_s" || id == "i64x2.extend_low_i32x4_u" || id == "i64x2.extend_high_i32x4_u"
	) {
		if (args == []) defType
		else if (args[0] == WiseAstTypeSIMD()) WiseAstTypeSIMD()
		else defType;
	} else if (id == "convert_s" || id == "convert_u") {
		knownResType = maybeBind(resType, \t -> if (t == WiseAstTypeF64() || t == WiseAstTypeF32()) Some(t) else None());
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) either(knownResType, WiseAstTypeF32())
		else if (args[0] == WiseAstTypeI64()) either(knownResType, WiseAstTypeF64())
		else defType;
	} else if (id == "promote") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeF32()) WiseAstTypeF64()
		else defType;
	} else if (id == "f64x2.promote_low_f32x4") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeSIMD()) WiseAstTypeSIMD()
		else defType;
	} else if (id == "demote") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeF64()) WiseAstTypeF32()
		else defType;
	} else if (id == "f32x4.demote_f64x2_zero") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeSIMD()) WiseAstTypeSIMD()
		else defType;
	} else if (id == "reinterpret") {
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeF32()
		else if (args[0] == WiseAstTypeF32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeF64()
		else if (args[0] == WiseAstTypeF64()) WiseAstTypeI64()
		else defType;
	} else if (id == "lt_u") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else defType;
	} else if (id == "gt_u") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else defType;
	} else if (id == "le_u") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else defType;
	} else if (id == "ge_u") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeI32()) WiseAstTypeI32()
		else if (args[0] == WiseAstTypeI64()) WiseAstTypeI64()
		else defType;
	} else if (id == "abs" || id == "ceil" || id == "floor" || id == "nearest" || id == "sqrt") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeF32()) WiseAstTypeF32()
		else if (args[0] == WiseAstTypeF64()) WiseAstTypeF64()
		else defType;
	} else if (id == "min" || id == "max" || id == "copysign") { 
		if (args == []) defType
		else if (args[0] == WiseAstTypeF32()) WiseAstTypeF32()
		else if (args[0] == WiseAstTypeF64()) WiseAstTypeF64()
		else defType;
	} else if (id == "memory.copy") {
		voidType;
	} else if (id == "v128.store") {
		voidType;
	} else {
		println("Can't detect the result type. Unknown wasm instruction : " + id + "[" + toString(args) + "]");
		defType;
	}
}

extractWiExpFromWiseAst(e : WiseAst) -> WiExp {
	switch (e : WiseAst) {
		WiExp() : e;
		default : {
			println("can't extract expression from WiseAst: " + toString(e));
			WiBrace([], 0);
		}
	}
}
// Automatically generated from Gringo grammar
import ds/list;

export {
	// This is a monster type used when parsing
	WiseAst ::= WiseAstList, WiseAstBool, WiseAstInt, WiseAstDouble, WiseAstString, WiAtom, WiDecl, WiExp, WiOpttype, WiType, WiWarg, WiAdd, WiAnd, WiBasictype, WiBool, WiBoolAnd, WiBoolNot, WiBoolOr, WiBrace, WiBreak, WiCall, WiContinue, WiDiv, WiDouble, WiEqual, WiFntype, WiFunction, WiGlobal, WiGreater, WiGreaterEqual, WiGreaterEqualu, WiGreateru, WiHex32, WiHex64, WiHexf32, WiHexf64, WiI64, WiIdtype, WiIf, WiIfelse, WiImport, WiInt, WiIsNull, WiLess, WiLessEqual, WiLessEqualu, WiLessu, WiLet, WiMod, WiMul, WiNegate, WiNotEqual, WiOr, WiReturn, WiSet, WiSub, WiTuple, WiTupledot, WiTupletype, WiTypeannotation, WiVar, WiWaseEmpty, WiWasmOp, WiWhile, WiWiseInclude, WiXor;

	WiseAstList(value : List<WiseAst>);
	WiseAstBool(value : bool);
	WiseAstInt(value : int);
	WiseAstDouble(value : double);
	WiseAstString(value : string);

	WiAtom ::= WiBool, WiBreak, WiContinue, WiDouble, WiHex32, WiHex64, WiHexf32, WiHexf64, WiI64, WiIf, WiIfelse, WiInt, WiReturn, WiSet, WiTuple, WiVar, WiWhile;
	WiDecl ::= WiFunction, WiGlobal, WiImport, WiWaseEmpty, WiWiseInclude;
	WiExp ::= WiAdd, WiAnd, WiAtom, WiBoolAnd, WiBoolNot, WiBoolOr, WiBrace, WiCall, WiDiv, WiEqual, WiGreater, WiGreaterEqual, WiGreaterEqualu, WiGreateru, WiIsNull, WiLess, WiLessEqual, WiLessEqualu, WiLessu, WiLet, WiMod, WiMul, WiNegate, WiNotEqual, WiOr, WiSub, WiTupledot, WiTypeannotation, WiWasmOp, WiXor;
	WiOpttype ::= WiBasictype, WiType;
	WiType ::= WiBasictype, WiFntype, WiTupletype;
	WiWarg ::= WiInt, WiVar, WiType;
	WiAdd(exp1 : WiExp, exp2 : WiExp);
	WiAnd(exp1 : WiExp, exp2 : WiExp);
	WiBasictype(s : string);
	WiBool(b : bool);
	WiBoolAnd(exp1 : WiExp, exp2 : WiExp);
	WiBoolNot(exp : WiExp);
	WiBoolOr(exp1 : WiExp, exp2 : WiExp);
	WiBrace(expsemi : [WiExp]);
	WiBreak();
	WiCall(exp : WiExp, exps : [WiExp]);
	WiContinue();
	WiDiv(exp1 : WiExp, exp2 : WiExp);
	WiDouble(d : double);
	WiEqual(exp1 : WiExp, exp2 : WiExp);
	WiFntype(types : [WiType], type : WiType);
	WiFunction(s : string, optexport : string, lambdaargs : [WiIdtype], type : WiType, exp : WiExp, decl : WiDecl);
	WiGlobal(s : string, optexport : string, type : WiType, i : int, exp : WiExp, decl : WiDecl);
	WiGreater(exp1 : WiExp, exp2 : WiExp);
	WiGreaterEqual(exp1 : WiExp, exp2 : WiExp);
	WiGreaterEqualu(exp1 : WiExp, exp2 : WiExp);
	WiGreateru(exp1 : WiExp, exp2 : WiExp);
	WiHex32(s : string);
	WiHex64(s : string);
	WiHexf32(s : string);
	WiHexf64(s : string);
	WiI64(s : string);
	WiIdtype(s : string, type : WiType);
	WiIf(exp1 : WiExp, exp2 : WiExp);
	WiIfelse(exp1 : WiExp, exp2 : WiExp, exp3 : WiExp);
	WiImport(s1 : string, type : WiType, i : int, s2 : string, s3 : string, decl : WiDecl);
	WiInt(i : int);
	WiIsNull(exp : WiExp);
	WiLess(exp1 : WiExp, exp2 : WiExp);
	WiLessEqual(exp1 : WiExp, exp2 : WiExp);
	WiLessEqualu(exp1 : WiExp, exp2 : WiExp);
	WiLessu(exp1 : WiExp, exp2 : WiExp);
	WiLet(s : string, i : int, opttype : WiOpttype, exp : WiExp, brace : WiBrace);
	WiMod(exp1 : WiExp, exp2 : WiExp);
	WiMul(exp1 : WiExp, exp2 : WiExp);
	WiNegate(exp : WiExp);
	WiNotEqual(exp1 : WiExp, exp2 : WiExp);
	WiOr(exp1 : WiExp, exp2 : WiExp);
	WiReturn(exps : [WiExp]);
	WiSet(s : string, exp : WiExp);
	WiSub(exp1 : WiExp, exp2 : WiExp);
	WiTuple(exps : [WiExp]);
	WiTupledot(exp : WiExp, i : int);
	WiTupletype(types : [WiType]);
	WiTypeannotation(exp : WiExp, type : WiType);
	WiVar(s : string);
	WiWaseEmpty();
	WiWasmOp(s : string, wargs : [WiWarg], exps : [WiExp]);
	WiWhile(exp1 : WiExp, exp2 : WiExp);
	WiWiseInclude(s : string, decl : WiDecl);
	WiXor(exp1 : WiExp, exp2 : WiExp);
}

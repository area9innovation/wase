import tools/dsl/dsl_include;
import ds/set;
import wise/wise_types2dsl;
import text/blueprint;
import wise/wise_template_fn;

// TODO: remove [templates] from call()
export {
	decomposePolyWise(program : DslAst) -> DslAst;
	decomposePolyWiseAst(program : WiseAst) -> WiseAst;
}

decomposePolyWise(program : DslAst) -> DslAst {
	wiseCode = dslAst2WiseAst(program);
	wiseProgram = decomposePolyWiseAst(wiseCode);
	wiseAst2DslAst(wiseProgram);
}

decomposePolyWiseAst(program : WiseAst) -> WiseAst {
	declarations = collectPolyDeclarations(program, makeTree());
	polyVars = collectPolyCalls(program, declarations);
	expandPolyCalls(program, declarations, polyVars);
}

// result - Tree<fnName, [templName]>
collectPolyDeclarations(value : WiseAst, acc : Tree<string, [string]>) -> Tree<string, [string]> {
	switch(value : WiseAst) {
		WiseAstList(l) : foldList(l, acc, \acc2, v -> collectPolyDeclarations(v, acc2));
		WiseAstBool(__) : acc;
		WiseAstInt(__) : acc;
		WiseAstDouble(__) : acc;
		WiseAstString(__) : acc;
		WiType(): acc;
		WiIdtype(__, __, __) : acc;
		WiFunction(__, id, templates, args, t, e, decl2, __) : {
			usedTypes = arrayPush(map(args, \a -> a.type), t);
			newAcc = if (templates != [] && !containsKeyTree(acc, id)) {
				unpair(
					isValidFnTemplates(templates, usedTypes),
					\valid, usedTemplates -> 
						if (valid) {
							setTree(acc, id, templates)
						} else if (usedTemplates == [] || forall(usedTemplates, \ut -> contains(templates, ut))) {
							println("WARNING:  " + id + ": declared " + toString(templates) + " templates, but used " + toString(usedTemplates));
							setTree(acc, id, templates)
						} else {
							println("ERROR: wrong declarations of templates " + toString(templates) + " in " + id + ". Used Templates : " + toString(usedTemplates));
							acc;
						}
				)
			} else {
				usedTemplates = set2array(extractUsedTemplates(usedTypes));
				if (usedTemplates != []) {
					println("ERROR: templates are not declared in " + id + ". Used Templates : " + toString(usedTemplates));
					acc;
				} else {
					acc;
				}
			}
			collectPolyDeclarations(decl2, collectPolyDeclarations(e, newAcc));
		}
		WiGlobal(__, __, __, __, e, decl2, __) : collectPolyDeclarations(decl2, collectPolyDeclarations(e, acc));
		WiImport(__, __, __, __, __, decl2, __) : collectPolyDeclarations(decl2, acc);
		WiWaseEmpty(__) : acc;
		WiWiseInclude(__, decl2, __) : collectPolyDeclarations(decl2, acc);
		WiAdd(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiSub(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiAnd(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiBoolAnd(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiBoolNot(e, __) : collectPolyDeclarations(e, acc);
		WiBoolOr(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiXor(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiBrace(exps, __) : fold(exps, acc, \acc2, e -> collectPolyDeclarations(e, acc2));
		WiCall(e, exps, __) : fold(exps, collectPolyDeclarations(e, acc), \acc2, e2 -> collectPolyDeclarations(e2, acc2));
		WiDiv(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiEqual(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiGreater(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiGreaterEqual(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiGreaterEqualu(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiGreateru(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiLess(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiLessEqual(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiLessEqualu(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiLessu(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiIsNull(e, __) : collectPolyDeclarations(e, acc);
		WiTupledot(e, __, __) : collectPolyDeclarations(e, acc);
		WiTypeannotation(e, __, __) : collectPolyDeclarations(e, acc);
		WiLet(__, __, __, e, brace, __) : collectPolyDeclarations(brace, collectPolyDeclarations(e, acc));
		WiWasmOp(__, wargs, exps, __) : fold(concat(wargs, exps), acc, \acc2, e -> collectPolyDeclarations(e, acc2));
		WiMod(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiMul(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiNegate(e, __) : collectPolyDeclarations(e, acc);
		WiNotEqual(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiOr(exp1, exp2, __) : collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiBool(__, __): acc;
		WiBreak(__): acc;
		WiContinue(__): acc;
		WiDouble(__, __): acc;
		WiHex32(__, __): acc;
		WiHex64(__, __): acc;
		WiHexf32(__, __): acc;
		WiHexf64(__, __): acc;
		WiI64(__, __): acc;
		WiIf(exp1, exp2, __): collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiIfelse(exp1, exp2, exp3, __): collectPolyDeclarations(exp3, collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc)));
		WiInt(__, __): acc;
		WiReturn(exps, __): fold(exps, acc, \acc2, e -> collectPolyDeclarations(e, acc2));
		WiSet(id, e, __): collectPolyDeclarations(e, acc);
		WiSizeoftype(type, __): acc;
		WiDefoftype(type, __): acc;
		WiTuple(exps, __): fold(exps, acc, \acc2, e -> collectPolyDeclarations(e, acc2));
		WiVar(__, __): acc;
		WiWhile(exp1, exp2, __): collectPolyDeclarations(exp2, collectPolyDeclarations(exp1, acc));
		WiPolycall(e, templates, __): collectPolyDeclarations(e, acc);
	}
}

isValidFnTemplates(templates : [string], types : [WiType]) -> Pair<bool, [string]> {
	if (templates == []) {
		Pair(false, [])
	} else {
		usedTypes = extractUsedTemplates(types);
		Pair(
			length(templates) == sizeSet(usedTypes)
			&& forall(templates, \t -> containsSet(usedTypes, t)),
			set2array(usedTypes)
		)
	}
}

extractUsedTemplates(types : [WiType]) -> Set<string> {
	simpleTypes = buildSet(getSimpleWiseTypes());
	fold(types, makeSet(), \acc, t -> extractWiBasictypeNames(makeList1(t), acc, \bt -> !containsSet(simpleTypes, bt)));
}

// const?
getSimpleWiseTypes() -> [string] {
	["i32", "i64",  "f32", "f64", "v128", "bool", "auto"]
}

extractWiBasictypeNames(l : List<WiType>, acc : Set<string>, filterFn : (string) -> bool) -> Set<string> {
	switch (l : List) {
		EmptyList(): acc;
		Cons(h, t): switch (h : WiType) {
			WiBasictype(s, __) : extractWiBasictypeNames(t, if (filterFn(s)) insertSet(acc, s) else acc, filterFn);
			WiFntype(types, retType, __) : extractWiBasictypeNames(fold(types, Cons(retType, t), \acc2, tt -> Cons(tt, acc2)), acc, filterFn);
			WiTupletype(types, __) : extractWiBasictypeNames(fold(types, t, \acc2, tt -> Cons(tt, acc2)), acc, filterFn);
		}
	}
}

// result - Tree<fnName, Tree<templName, types>>
collectPolyCalls(value : WiseAst, declarations : Tree<string, [string]>) -> Tree<string, Tree<string, Set<WiType>>> {
	collectPolyCallsRec(value, declarations, makeTree(), makeTree(), makeSet()).first;
}

collectPolyCallsRec(
	value : WiseAst,
	declarations : Tree<string, [string]>,
	acc : Tree<string, Tree<string, Set<WiType>>>,
	scope : Tree<string, Set<WiType>>,
	uncollectedCalls : Set<Pair<string, string>>,
) -> Pair<Tree<string, Tree<string, Set<WiType>>>, Set<Pair<string, string>>> {
	polyCalls = collectPolyCallsFromAst(value, declarations, Pair(acc, makeSet()), scope);
	if (!isEmptySet(polyCalls.second) && polyCalls.second != uncollectedCalls) {
		collectPolyCallsRec(value, declarations, polyCalls.first, makeTree(), polyCalls.second);
	} else {
		polyCalls;
	}
}

collectPolyCallsFromAst(
	value : WiseAst,
	declarations : Tree<string, [string]>,
	acc : Pair<Tree<string, Tree<string, Set<WiType>>>, Set<Pair<string, string>>>,
	scope : Tree<string, Set<WiType>>
) -> Pair<Tree<string, Tree<string, Set<WiType>>>, Set<Pair<string, string>>> {
	rec = \v -> collectPolyCallsFromAst(v, declarations, acc, scope);
	recNewScope = \v -> collectPolyCallsFromAst(v, declarations, acc, makeTree());
	rec2 = \v1, v2 -> collectPolyCallsFromAst(v2, declarations, collectPolyCallsFromAst(v1, declarations, acc, scope), scope);
	rec2NewScope = \fnId, v1, v2 -> {
		fnScope = eitherFn(lookupTree(acc.first, fnId), idfn, makeTree);
		collectPolyCallsFromAst(v2, declarations, collectPolyCallsFromAst(v1, declarations, acc, fnScope), fnScope);
	}
	recA = \exps, acc2 -> fold(exps, acc2, \acc3, e -> collectPolyCallsFromAst(e, declarations, acc3, scope));
	switch(value : WiseAst) {
		WiseAstList(l) : foldList(l, acc, \acc2, v -> collectPolyCallsFromAst(v, declarations, acc2, scope));
		WiseAstBool(__) : acc;
		WiseAstInt(__) : acc;
		WiseAstDouble(__) : acc;
		WiseAstString(__) : acc;
		WiType(): acc;
		WiIdtype(__, __, __) : acc;
		WiFunction(__, id, __, __, __, e, decl2, __) : rec2NewScope(id, e, decl2);
		WiGlobal(__, __, __, __, e, decl2, __) : rec2NewScope("", e, decl2);
		WiImport(__, __, __, __, __, decl2, __) : recNewScope(decl2);
		WiWaseEmpty(__) : acc;
		WiWiseInclude(__, decl2, __) : recNewScope(decl2);
		WiAdd(exp1, exp2, __) : rec2(exp1, exp2);
		WiSub(exp1, exp2, __) : rec2(exp1, exp2);
		WiAnd(exp1, exp2, __) : rec2(exp1, exp2);
		WiBoolAnd(exp1, exp2, __) : rec2(exp1, exp2);
		WiBoolNot(e, __) : rec(e);
		WiBoolOr(exp1, exp2, __) : rec2(exp1, exp2);
		WiXor(exp1, exp2, __) : rec2(exp1, exp2);
		WiBrace(exps, __) : recA(exps, acc);
		WiCall(e, exps, __) : recA(exps, rec(e));
		WiDiv(exp1, exp2, __) : rec2(exp1, exp2);
		WiEqual(exp1, exp2, __) : rec2(exp1, exp2);
		WiGreater(exp1, exp2, __) : rec2(exp1, exp2);
		WiGreaterEqual(exp1, exp2, __) : rec2(exp1, exp2);
		WiGreaterEqualu(exp1, exp2, __) : rec2(exp1, exp2);
		WiGreateru(exp1, exp2, __) : rec2(exp1, exp2);
		WiLess(exp1, exp2, __) : rec2(exp1, exp2);
		WiLessEqual(exp1, exp2, __) : rec2(exp1, exp2);
		WiLessEqualu(exp1, exp2, __) : rec2(exp1, exp2);
		WiLessu(exp1, exp2, __) : rec2(exp1, exp2);
		WiIsNull(e, __) : rec(e);
		WiTupledot(e, __, __) : rec(e);
		WiTypeannotation(e, __, __) : recNewScope(e);
		WiLet(__, __, __, e, brace, __) : rec2(e, brace);
		WiWasmOp(__, wargs, exps, __) : recA(concat(wargs, exps), acc);
		WiMod(exp1, exp2, __) : rec2(exp1, exp2);
		WiMul(exp1, exp2, __) : rec2(exp1, exp2);
		WiNegate(e, __) : rec(e);
		WiNotEqual(exp1, exp2, __) : rec2(exp1, exp2);
		WiOr(exp1, exp2, __) : rec2(exp1, exp2);
		WiBool(__, __): acc;
		WiBreak(__): acc;
		WiContinue(__): acc;
		WiDouble(__, __): acc;
		WiHex32(__, __): acc;
		WiHex64(__, __): acc;
		WiHexf32(__, __): acc;
		WiHexf64(__, __): acc;
		WiI64(__, __): acc;
		WiIf(exp1, exp2, __): rec2(exp1, exp2);
		WiIfelse(exp1, exp2, exp3, __): collectPolyCallsFromAst(exp3, declarations, rec2(exp1, exp2), scope);
		WiInt(__, __): acc;
		WiReturn(exps, __): recA(exps, acc);
		WiSet(id, e, __): rec(e);
		WiTuple(exps, __): recA(exps, acc);
		WiVar(__, __): acc;
		WiWhile(exp1, exp2, __): rec2(exp1, exp2);
		WiSizeoftype(type, __): acc;
		WiDefoftype(type, __): acc;
		WiPolycall(e, realTypes, __): {
			fnName = extractFnName(e);
			templatesM = lookupTree(declarations, fnName);
			eitherFn(
				templatesM,
				\declTemplates -> {
					if (length(declTemplates) != length(realTypes)) {
						println("ERROR : wrong '" + fnName + "' call. Expected " + toString(length(declTemplates)) + " templates, but got " + toString(length(realTypes))+". In '" + fnName + toString(realTypes) + "'");
						acc;
					} else {
						oldTypes = lookupTreeDef(acc.first, fnName, makeTree());
						newTypes = foldi(realTypes, Pair(oldTypes, acc.second), \i, acc2, t -> {
							usedTypes = collectTemplateRealTypes(t, scope, fnName, Pair(makeSet(), makeSet()));
							newRealTypes = foldSet(usedTypes.first, lookupTreeDef(acc2.first, declTemplates[i], makeSet()), \acc3, ut -> insertSet(acc3, ut));
							Pair(
								setTree(acc2.first, declTemplates[i], newRealTypes),
								mergeSets(acc2.second, usedTypes.second)
							);
						});
						Pair(setTree(acc.first, fnName, newTypes.first), newTypes.second);
					}
				},
				\-> {
					println("ERROR : function '" + fnName + "' is not found. " + toString(value));
					acc
				}
			)
		}
	}
}

collectTemplateRealTypes(type : WiType, scope : Tree<string, Set<WiType>>, fnName : string, acc : Pair<Set<WiType>, Set<Pair<string, string>>>) -> Pair<Set<WiType>, Set<Pair<string, string>>> {
	recA = \types -> {
		existsChanges = \newType, oldType -> switch (newType.tree) {
			TreeEmpty() : true;
			TreeNode(key, __, left, right, depth) : key == oldType && depth == 1;
		}
		fixedTypes = map(types, \t -> collectTemplateRealTypes(t, scope, fnName, Pair(makeSet(), makeSet())));
		newTypes = if (foldi(types, false, \i, isEqual, t -> isEqual && existsChanges((fixedTypes[i]).first, t))) {
			[];
		} else {
			fold(tail(fixedTypes), map(set2array(fixedTypes[0].first), v2a), \tupleTypes, fieldTypes -> {
				mapConcat(set2array(fieldTypes.first), \ft -> map(tupleTypes, \tt -> arrayPush(tt, ft)))
			});
		}
		Pair(newTypes, fold(fixedTypes, makeSet(), \acc2, p -> mergeSets(acc2, p.second)))
	}

	rec = \t -> Pair(insertSet(acc.first, t), acc.second);
	
	switch (type : WiType) {
		WiBasictype(s, __) : if (contains(getSimpleWiseTypes(), s)) {
			rec(type);
		} else {
			eitherFn(
				lookupTree(scope, s),
				\ts -> Pair(mergeSets(ts, acc.first), acc.second),
				\-> Pair(acc.first, insertSet(acc.second, Pair(fnName, s)))
			);
		}
		WiFntype(types, retType, eclass): {
			fixedTypes = recA(concat([retType], types));
			if (fixedTypes.first == []) {
				rec(type);
			} else {
				Pair(fold(fixedTypes.first, acc.first, \acc2, t -> insertSet(acc2, WiFntype(tail(t), t[0], eclass))), mergeSets(acc.second, fixedTypes.second));
			}
		}
		WiTupletype(types, eclass) : if (types == []) {
			rec(type);
		} else {
			fixedTypes = recA(types);
			if (fixedTypes.first == []) {
				rec(type);
			} else {
				Pair(fold(fixedTypes.first, acc.first, \acc2, t -> insertSet(acc2, WiTupletype(t, eclass))), mergeSets(acc.second, fixedTypes.second));
			}
		}
	}
}

// TODO: replace tmplAliases with real type everywhere. Example : 
// a : T = 0;
expandPolyCalls(value : WiseAst, declarations : Tree<string, [string]>, polyVars : Tree<string, Tree<string, Set<WiType>>>) -> WiseAst {
	switch(value : WiseAst) {
		WiseAstList(l) : WiseAstList(mapList(l, \v -> expandPolyCalls(v, declarations, polyVars)));
		WiseAstBool(__) : value;
		WiseAstInt(__) : value;
		WiseAstDouble(__) : value;
		WiseAstString(__) : value;
		WiIdtype(__, __, __) : value;
		WiBasictype(s, __): value;
		WiFntype(types, type, __): value;
		WiTupletype(types, __): value;
		WiDecl() : expandPolyCallsDecl(value, declarations, polyVars);
		WiExp() : expandPolyCallsExp("", [], value, declarations, polyVars);
		WiInt(__, __): value;
		WiType(): value;
	}
}

expandPolyCallsWargs(value : WiWarg, polyVars : Tree<string, Tree<string, Set<WiType>>>) -> WiWarg {
	switch (value : WiWarg) {
		WiInt(__, __): value;
		WiVar(__, __): value;
		WiType(): value;
	}
}

expandPolyCallsExp(fn : string, templateTypes : [Pair<string, WiType>], value : WiExp, declarations : Tree<string, [string]>, polyVars : Tree<string, Tree<string, Set<WiType>>>) -> WiExp {
	recExp = \v -> expandPolyCallsExp(fn, templateTypes, v, declarations, polyVars);
	recBrace = \v, eclass -> WiBrace(map(v.expsemi, recExp), eclass);
	recArg = \v -> expandPolyCallsWargs(v, polyVars);
	isPolyCall = \e -> isSameStructType(e, WiPolycall(e, [], 0));
	switch (value : WiExp) {
		WiAdd(exp1, exp2, eclass) : WiAdd(recExp(exp1), recExp(exp2), eclass);
		WiSub(exp1, exp2, eclass) : WiSub(recExp(exp1), recExp(exp2), eclass);
		WiAnd(exp1, exp2, eclass) : WiAnd(recExp(exp1), recExp(exp2), eclass);
		WiOr(exp1, exp2, eclass) : WiOr(recExp(exp1), recExp(exp2), eclass);
		WiBoolAnd(exp1, exp2, eclass) : WiBoolAnd(recExp(exp1), recExp(exp2), eclass);
		WiBoolNot(e, eclass) : WiBoolNot(recExp(e), eclass);
		WiBoolOr(exp1, exp2, eclass) : WiBoolOr(recExp(exp1), recExp(exp2), eclass);
		WiXor(exp1, exp2, eclass) : WiXor(recExp(exp1), recExp(exp2), eclass);
		WiBrace(exps, eclass) : WiBrace(map(exps, recExp), eclass);
		WiDiv(exp1, exp2, eclass) : WiDiv(recExp(exp1), recExp(exp2), eclass);
		WiEqual(exp1, exp2, eclass) : WiEqual(recExp(exp1), recExp(exp2), eclass);
		WiGreater(exp1, exp2, eclass) : WiGreater(recExp(exp1), recExp(exp2), eclass);
		WiGreaterEqual(exp1, exp2, eclass) : WiGreaterEqual(recExp(exp1), recExp(exp2), eclass);
		WiGreaterEqualu(exp1, exp2, eclass) : WiGreaterEqualu(recExp(exp1), recExp(exp2), eclass);
		WiGreateru(exp1, exp2, eclass) : WiGreateru(recExp(exp1), recExp(exp2), eclass);
		WiLess(exp1, exp2, eclass) : WiLess(recExp(exp1), recExp(exp2), eclass);
		WiLessEqual(exp1, exp2, eclass) : WiLessEqual(recExp(exp1), recExp(exp2), eclass);
		WiLessEqualu(exp1, exp2, eclass) : WiLessEqualu(recExp(exp1), recExp(exp2), eclass);
		WiLessu(exp1, exp2, eclass) : WiLessu(recExp(exp1), recExp(exp2), eclass);
		WiIsNull(e, eclass) : WiIsNull(recExp(e), eclass);
		WiLet(id, i, opttype, e, brace, eclass) : {
			if (!isPolyCall(e) && containsKeyTree(declarations, extractFnName(e))) {
				println("ERROR : you cannot use aliases for functions with templates. [Variable '" + id + "'. Value '" + toString(e) + "']");
				recBrace(brace, eclass)
			} else {
				WiLet(id, i, fixTemplatesInWiOpttype(opttype, templateTypes), recExp(e), recBrace(brace, eclass), eclass);
			}
		}
		WiMod(exp1, exp2, eclass) : WiMod(recExp(exp1), recExp(exp2), eclass);
		WiMul(exp1, exp2, eclass) : WiMul(recExp(exp1), recExp(exp2), eclass);
		WiNegate(e, eclass) : WiNegate(recExp(e), eclass);
		WiNotEqual(exp1, exp2, eclass) : WiNotEqual(recExp(exp1), recExp(exp2), eclass);
		WiTupledot(e, int0, eclass) : WiTupledot(recExp(e), int0, eclass);
		WiTypeannotation(e, type, eclass) : WiTypeannotation(recExp(e), type, eclass);
		WiWasmOp(s, wargs, exps, eclass) : WiWasmOp(s, map(wargs, recArg), map(exps, recExp), eclass);
		// WiAtom :
		WiBool(__, __): value;
		WiBreak(__): value;
		WiContinue(__): value;
		WiDouble(__, __): value;
		WiHex32(__, __): value;
		WiHex64(__, __): value;
		WiHexf32(__, __): value;
		WiHexf64(__, __): value;
		WiI64(__, __): value;
		WiInt(__, __) : value;
		WiIf(exp1, exp2, eclass): WiIf(recExp(exp1), recExp(exp2), eclass);
		WiIfelse(exp1, exp2, exp3, eclass): WiIfelse(recExp(exp1), recExp(exp2), recExp(exp3), eclass);
		WiReturn(exps, eclass): WiReturn(map(exps, recExp), eclass);
		WiSet(id, e, eclass): WiSet(id, recExp(e), eclass);
		WiTuple(exps, eclass): WiTuple(map(exps, recExp), eclass);
		WiWhile(exp1, exp2, eclass): WiWhile(recExp(exp1), recExp(exp2), eclass);
		WiVar(__, __): value;
		// TODO : move next 2 types
		WiSizeoftype(type, eclass): {
			size = calculateSizeOfType(templateTypes, type);
			// println("Size of " + toString(type) + " is " + i2s(size));
			WiInt(size, eclass);
		}
		WiDefoftype(type, __): makeDefaultValueForType(templateTypes, type);
		WiCall(e, exps, eclass) : {
			recFn = \-> WiCall(recExp(e), map(exps, recExp), eclass);
			if (isPolyCall(e)) {
				recFn()
			} else {
				fnName = extractFnName(e);
				eitherFn(
					lookupTree(declarations, fnName),
					\params -> {
						println("ERROR : fn call without params : " + fnName + toString(params));
						value
					},
					recFn
				);
			}
		}
		WiPolycall(e, templates, eclass): {
			realTypes = map(templates, \t -> replaceTemplateWitRealType(t, templateTypes));
			fixPolyFnName(fn, templateTypes, e, realTypes, polyVars, declarations);
		}
	}
}

fixTemplatesInWiOpttype(opttype : WiOpttype, templateTypes : [Pair<string, WiType>]) -> WiOpttype {
	switch (opttype : WiOpttype) {
		WiBasictype(s, eclass) : replaceTemplateWitRealType(opttype, templateTypes);
		WiFntype(types, retType, eclass) : replaceTemplateWitRealType(opttype, templateTypes);
		WiTupletype(types, eclass) : replaceTemplateWitRealType(opttype, templateTypes);
	}
}

replaceTemplateWitRealType(type : WiType, scope : [Pair<string, WiType>]) -> WiType {
	rec = \t -> replaceTemplateWitRealType(t, scope);
	switch (type : WiType) {
		WiBasictype(s, eclass) : if (contains(getSimpleWiseTypes(), s)) {
			type
		} else {
			either(findmap(scope, unpairC(\tmplName, t -> if (tmplName == s) Some(t) else None())), type);
		}
		WiFntype(types, retType, eclass) : WiFntype(map(types, rec), rec(retType), eclass);
		WiTupletype(types, eclass) : WiTupletype(map(types, rec), eclass);
	}
}

expandPolyCallsDecl(value : WiDecl, declarations : Tree<string, [string]>, polyVars : Tree<string, Tree<string, Set<WiType>>>) -> WiDecl {
	recDecl = \v -> expandPolyCallsDecl(v, declarations, polyVars);
	recExp = \id, tmpls, v -> expandPolyCallsExp(id, tmpls, v, declarations, polyVars);

	switch (value : WiDecl) {
		WiFunction(optexp, id, templates, args, type, e, decl2, eclass) : {
			newDecl = recDecl(decl2);
			if (templates != []) {
				eitherFn(
					lookupTree(polyVars, id),
					\polyTypes -> {
						fns = createPolyFunctions(WiFunction(value with decl = WiWaseEmpty(0)), polyTypes, polyVars, declarations);
						fold(fns, newDecl, \acc, fn -> WiFunction(fn with decl = acc));
					},
					// declared, but not used
					\-> newDecl
				);
			} else {
				WiFunction(optexp, id, templates, args, type, recExp(id, [], e), newDecl, eclass);
			}
		}
		WiGlobal(id, optexp, type, optmut, e, decl2, eclass) : WiGlobal(id, optexp, type, optmut, recExp(id, [], e), recDecl(decl2), eclass);
		WiImport(id1, type, optmut, id2, id3, decl2, eclass) : WiImport(id1, type, optmut, id2, id3, recDecl(decl2), eclass);
		WiWaseEmpty(__) : value;
		WiWiseInclude(s, decl2, eclass) : WiWiseInclude(s, recDecl(decl2), eclass);
	}
}

createPolyFunctions(fn : WiFunction, templates : Tree<string, Set<WiType>>, polyVars : Tree<string, Tree<string, Set<WiType>>>, declarations : Tree<string, [string]>) -> [WiFunction] {
	sfxs : [Pair<string, [Pair<string, WiType>]>] = fold(sortCustom(tree2pairs(templates), firstOfPair, true), [], \acc, p -> unpair(p, \templName, types -> {
		mapConcat(set2array(types), \t -> {
			typeSfx = "_" + wiType2polySfx(t);
			inf = Pair(templName, t);
			if (acc == []) [Pair(typeSfx, [inf])] else map(acc, unpairC(\ft, finf -> Pair(ft + typeSfx, arrayPush(finf, inf))));
		});
	}));
	fixArgTypes = \types, templTypes -> map(types, \t -> WiIdtype(t.id, wiType2realType(t.type, templTypes), 0)); // templName -> realType // eclass?
	fnDecls = expandPolyCallsDecl(fn.decl, declarations, polyVars);
	map(sfxs, unpairC(\sfx, templTypes : [Pair<string, WiType>] -> {
		WiFunction(
			fn.optexport,
			fn.id + sfx,
			[], // templates
			fixArgTypes(fn.lambdaargs, templTypes),
			wiType2realType(fn.type, templTypes),
			expandPolyCallsExp(fn.id, templTypes, fn.exp, declarations, polyVars),
			fnDecls,
			0, // eclass
		)
	}));
}

wiType2realType(t : WiType, templTypes : [Pair<string, WiType>]) -> WiType {
	rec = \tt -> wiType2realType(tt, templTypes);
	switch (t : WiType) {
		WiBasictype(s, eclass) : either(findmap(templTypes, unpairC(\templName, tt -> if (templName == s) Some(tt) else None())), t);
		WiFntype(types, retType, eclass) : WiFntype(map(types, rec), rec(retType), eclass);
		WiTupletype(types, eclass) : WiTupletype(map(types, rec), eclass);
	}
}

wiType2polySfx(t : WiType) -> string {
	switch (t : WiType) {
		WiBasictype(s, eclass) : "_" + s + "_";
		WiFntype(types, retType, eclass) : "_fn" + concatStrings(map(types, wiType2polySfx)) + "r" + wiType2polySfx(retType);
		WiTupletype(types, eclass) : "_tuple" + concatStrings(map(types, wiType2polySfx));
	}
}

// TODO : exp
// polycall -> fnExp ( == remove polycall)
fixPolyFnName(
	fnid : string,
	templateTypes : [Pair<string, WiType>],
	fn : WiExp,
	types : [WiType],
	polyVars : Tree<string, Tree<string, Set<WiType>>>,
	declarations : Tree<string, [string]>,
) -> WiExp {
	newFn = expandPolyCallsExp(fnid, templateTypes, fn, declarations, polyVars);
	fnName = extractFnName(fn);
	orderedTemplates = sortCustom(mapi(lookupTreeDef(declarations, fnName, []), \i, v -> Pair(v, i)), firstOfPair, true);
	if (length(orderedTemplates) == length(types)) {
		orderedTypes = map(orderedTemplates, unpairC(\__, ind -> types[ind]));
		fixedFnName = fnName + "_" + superglue(orderedTypes, wiType2polySfx, "_");
		replaceFnName(newFn, fnName, fixedFnName);
	} else {
		println("can't fix polyCall : " + fnName + " " + toString(types));
		newFn
	}
}


// TODO : exp
extractFnName(fn : WiExp) -> string {
	switch (fn : WiExp) {
		WiVar(id, eclass): id;
		default : "";
	}
}

// TODO : exp
replaceFnName(fn : WiExp, oldName : string, newName : string) -> WiExp {
	switch (fn : WiExp) {
		WiVar(id, eclass): if (id == oldName) WiVar(newName, eclass) else fn;
		default : fn;
	}
}
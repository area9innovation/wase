import ds/set;
import math/math;
import tools/dsl/dsl_util;

export {

	makeDotCallFn(arg1 : DslAst, arg2 : DslAst, n : int, pos : int) -> DslAst; // n is N from dotN
	isDotCallFn(v : DslAst) -> bool;

	addDotNFunctions(d : DslAst) -> DslAst;

}

makeDotCallFn(arg1 : DslAst, arg2 : DslAst, n : int, pos : int) -> DslAst {
	list2 = \l, r -> DslList(Cons(r, Cons(l, makeList())));
	DslNode("call", [makeDotNode(n, pos), list2(arg1, arg2)], pos);
}

makeDotNode(n : int, pos : int) -> DslNode {
	DslNode("var", [DslString("dot" + i2s(n))], pos)
}

extractDotFnName(v : DslAst) -> string {
	switch (v) {
		DslNode(name, largs, pos) : {
			if (name == "var" && length(largs) == 1) {
				varName = getDslString(largs[0]);
				if (startsWith(varName, "dot")) varName else "";
			} else {
				"";
			}
		}
		default: "";
	}
}

isDotCallFn(v : DslAst) -> bool {
	switch (v) {
		DslNode(name, largs, pos) : {
			name == "call"
			&& largs != []
			&& extractDotFnName(largs[0]) != "";
		}
		default: false;
	}
}

addDotNFunctions(d : DslAst) -> DslAst {
	fnNames = extractDotFnNames(d);
	fold(fnNames, d, \acc, name -> {
		// TODO : num offn = num of combinations
		// DslList(makeList()) = variant
		variantType = DslString("auto");
		returnType = DslNode("type", [variantType, variantType], 0);
		DslNode(
			"function",
			[
				DslString(name),
				DslInt(0), // export
				DslList(array2list(arrayPush(
					generate(1, getDotArgCount(name), \i -> DslNode("type", [DslString("f" + i2s(i)), variantType], 0)),
					DslNode("type", [DslString("n"), DslInt(0)], 0)
				))), // args : [idtype(id, type)]
				// DslNode("type", args, 0)
				returnType,
				DslNode("brace", [DslList(makeList()), returnType], 0), // body
				acc, // scope
				DslList(makeList())],
			0
		)
	});
}

extractDotFnNames(v : DslAst) -> [string] {
	set2array(extractDotNodeNames(makeList1(v), makeSet()));
}

getDotArgCount(fnName : string) -> int {
	s2i(takeAfter(fnName, "dot", ""));
}

extractDotNodeNames(values : List<DslAst>, acc : Set<string>) -> Set<string> {
	switch (values : List) {
		EmptyList(): acc;
		Cons(v, t): {
			switch (v : DslAst) {
				DslBool(__) : extractDotNodeNames(t, acc);
				DslInt(__) : extractDotNodeNames(t, acc);
				DslDouble(__) : extractDotNodeNames(t, acc);
				DslString(__) : extractDotNodeNames(t, acc);
				DslList(l) : extractDotNodeNames(concatList(l, t), acc);
				DslNode(__, args, __) : {
					name = extractDotFnName(v);
					extractDotNodeNames(
						fold(args, t, \ac, e -> Cons(e, ac)),
						if (name == "") acc else insertSet(acc, name)
					);
				}
			}
		}
	}
}
		
include lib/runtime;

//
// This is the worlds simplest memory allocator
// TODO: Add a free list and implement "free"
//

HEAP_POINTER : i32 = 4096;

initMemory() -> () {
	store<>(HEAP_POINTER, HEAP_POINTER + 4);
}

// Reserve i32 for ref count
allocateMemory(bytes : i32) -> i32 {
	headP : i32 = load<>(HEAP_POINTER);

	store<>(HEAP_POINTER, headP + bytes + 4); // 4 for the ref counter

	// Ref counter
	store<>(headP, 1);

	headP + 4;
}

dupMemory(address :i32) -> () {
	store<>(address - 4, load<>(address - 4) + 1);
}

dropMemory(address : i32, bytes : i32) -> () {
	refCnt = load<>(address - 4);
	if (refCnt == 1) {
		// TODO: Add this memory to a free list when ref count is 0
	} else {
		store<>(address - 4, refCnt - 1);
	}
}


// Memory layout for arrays:
// An array is a pointer to memory where the memory looks like this:
// 0: length of the array in # elements as i32
// 4+: The bytes for the elements
getArrayLength(array : i32) -> i32 {
	load<>(array) : i32;
}

// i32 arrays:

makeI32ArrayOfLength(length : i32) -> i32 {
	addr : i32 = allocateMemory(4 + 4 * length);
	store<>(addr, length);
	addr
}

makeI32EmptyArray() -> i32 {
	makeI32ArrayOfLength(0);
}


// DOES NOT MAKE COPY. Used for initialization of constant arrays
/*
// [1,2,3,4]
a = makeI32ArrayOfLength(4);
setI32ArrayIndex(a, 0, 1);
setI32ArrayIndex(a, 1, 2);
setI32ArrayIndex(a, 2, 3);
setI32ArrayIndex(a, 3, 4);
*/

setIndexI32Array(a : i32, index : i32, value : i32) -> () {
	l = getArrayLength(a);
	if (0 <= index && index < l) {
		store<>(a + 4 + 4 * index, value);
	}
}

// Compare arrays : -1 if array1 is smaller than array2, 0 is equal, 1 if bigger
compareI32Arrays(array1 : i32, array2 : i32) -> i32 {
	if (array1 == array2) return 0;
	len1 = getArrayLength(array1);
	len2 = getArrayLength(array2);
	minLen = if (len1 < len2) len1 else len2;
	var i = 0;
	while (i < minLen) {
		v1 = getIndexI32Array(array1, i);
		v2 = getIndexI32Array(array1, i);
		// i32 comparison
		c = if (v1 < v2) -1 else if (v1 == v2) 0 else 1;
		if (c != 0) return c;
		i := i + 1;
	};
	if (len1 == len2) 0 else if (len1 < len2) -1 else 1 
}

concatI32Arrays(array1 : i32, array2 : i32) -> i32 {
	length1 = getArrayLength(array1);
	length2 = getArrayLength(array2);
	newArray = makeI32ArrayOfLength(length1 + length2);
	if (length1 > 0) {
		memory.copy<>(newArray + 4, array1, length1 * 4);
	};
	if (length2 > 0) {
		memory.copy<>(newArray + 4 + length1 * 4, array2, length2 * 4);
	};
	newArray;
}

//	native replace : ([?], int, ?) -> [?] = Native.replace;
//	native subrange : (a : [?], index : int, length : int) -> [?] = Native.subrange;

arrayPushI32(array : i32, value : i32) -> i32 {
	// OK, first make a copy of the original array, but with one more element
	olength = getArrayLength(array);
	newArray = makeI32ArrayOfLength(olength + 1);

	if (olength > 0) {
		memory.copy<>(newArray + 4, array + 4, olength * 4);
	};
	store<>(newArray + olength * 4 + 4, value);

	newArray;
}

getIndexI32Array(a : i32, index : i32) -> i32 {
	l = getArrayLength(a);
	if (0 <= index && index < l) {
		load<>(a + 4 + 4 * index);
	} else {
		// OUT OF BOUNDS!
		0;
	}
}

freeI32Array(a : i32) -> () {
	dropMemory(a, 4 * load<>(a));
}


// f64 arrays:

makeF64ArrayOfLength(length : i32) -> i32 {
	addr : i32 = allocateMemory(4 + 8 * length);
	store<>(addr, length);
	addr
}

makeF64EmptyArray() -> i32 {
	makeF64ArrayOfLength(0);
}

arrayPushF64(array : i32, value : f64) -> i32 {
	// OK, first make a copy of the original array, but with one more element
	olength = getArrayLength(array);
	newArray = makeI32ArrayOfLength(olength + 1);

	if (olength > 0) {
		memory.copy<>(newArray + 4, array + 4, olength * 8);
	};
	store<>(newArray + olength * 8 + 4, value);
	newArray;
}

getIndexF64Array(a : i32, index : i32) -> f64 {
	l = getArrayLength(a);
	if (0 <= index && index < l) {
		load<>(a + 4 + 8 * index);
	} else {
		// OUT OF BOUNDS!
		0.0;
	}
}

freeF64Array(a : i32) -> () {
	dropMemory(a, 8 * load<>(a));
}


// Speculation for a polymorphic version
/*

makeArrayOfLength<type>(length : i32) -> i32 {
	addr : i32 = allocateMemory(4 + sizeof<type> * length);
	store<>(addr, length);
	addr
}

makeEmptyArray<type>() -> i32 {
	makeArrayOfLength<type>(0);
}


setIndexArray<type>(a : i32, index : i32, value : i32) -> () {
	l = getArrayLength(a);
	if (0 <= index && index < l) {
		store<>(a + 4 + sizeof<type> * index, value);
	}
}

compareArrays<type, comparetype>(array1 : i32, array2 : i32) -> i32 {
	len1 = getArrayLength(array1);
	len2 = getArrayLength(array2);
	minLen = if (len1 < len2) len1 else len2;
	var i = 0;
	while (i < minLen) {
		v1 = getIndexArray<type>(array1, i);
		v2 = getIndexArray<type>(array1, i)
		c = compareValues<comparetype>(v1, v2);
	}

[[int]]:

typedefs arrayi32 = i32;

compareValues_arrayi32(a1 : i32, a2 : i32) -> i32 {
	compareArrays<i32>(a1, a2)
}

compareValues_i32(i1 : i32, i2 : i32) -> i32 {
	if (i1 < i2) -1 else if (i1 == i2) 0 else 1
}


concatArrays<type>(array1 : i32, array2 : i32) -> i32 {
	length1 = getArrayLength(array1);
	length2 = getArrayLength(array2);
	newArray = makeArrayOfLength<type>(length1 + length2);
	if (length1 > 0) {
		memory.copy<>(newArray + 4, array1, length1 * sizeof<type>);
	};
	if (length2 > 0) {
		memory.copy<>(newArray + 4 + length1 * sizeof<type>, array2, length2 * sizeof<type>);
	};
	newArray;
}

makeF64ArrayOfLength = makeArrayOfLength<f64>

makeArrayOfLength<(i32, f64, v128)>

*/

// TODO:
// Get flow with [int] to work with comparison
// Get flow with [double] to work with comparison
// Get flow with [[int]] to work with comparison

export _start() -> () {
	initMemory();

	// i32 tests:
	
	myArray1 = makeI32EmptyArray();
	myArray2 = arrayPushI32(myArray1, 42);
	myArray3 = arrayPushI32(myArray2, 666);

	printi32(getArrayLength(myArray1)); // 0
	printByte(10);
	printi32(getArrayLength(myArray2)); // 1
	printByte(10);
	printi32(getIndexI32Array(myArray2, 0)); // 42
	printByte(10);

	printi32(getIndexI32Array(myArray3, 0));// 42
	printByte(10);
	printi32(getIndexI32Array(myArray3, 1));// 666
	printByte(10);

	printi32(compareI32Arrays(myArray2, myArray3)); // -1
	printByte(10);

	// f64 array test:
	farray1 = makeF64EmptyArray();
	farray2 = arrayPushF64(farray1, 3.141);
	printf64(getIndexF64Array(farray2, 0)); // 3.141

	{}
}

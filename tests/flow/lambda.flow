native println : io (flow) -> void = Native.println;

myFn(val : int, addFn : (int) -> int, subFn : (int) -> int) -> void{
	println(addFn(val + 1));
	println(subFn(val + 2));
}

deci(v : int) -> int {v - 1;}
inci(v : int) -> int {v + 1;}

myFn1( vfn1 : ((int) -> int) -> void) -> void { vfn1(inci); }
myFn2( vfn : (int) -> int) -> void { println(vfn(31)); }

printi(v : int) -> void {println(v)}

main() {
	step = 100; // capture local var, fn arg, lambda, global var/fn; templates
	rate = 3;
	delta = 5;
	localFn = \v1 : int -> println(v1 + step* rate);
	localFn(10); // 310
	// TODO
	// ifFn = if (true) (\v1 : int -> v1 * rate) else inci;

	localFn2 = \v1 : int -> v1 + step * rate + delta;
	r1 = localFn2(10);
	println(r1); // 315

	aliasFn = inci;
	println(aliasFn(2)); // 3

	aliasLambda = localFn2;

	myFn(20, \v2 -> v2 + step * rate, \v2 -> v2 - step * rate); // 321  -278
	myFn(21, aliasFn, deci); // 23 22
	myFn(21, localFn2, aliasLambda); // 327 328
	
	myFn1(\incfn : (int) -> int -> println(incfn(30))); // 31

	myFn1(\incfn -> printi(incfn(30))); // 31
	
	myFn1(\incfn -> {
		printiL = \v : int -> println(v + step);
		printiL(incfn(30 + rate));
	}); // 134
	// TODO: flow2type for println ? or just toString
	// myFn1(\incfn -> println(incfn(30))); // incfn without a type

	myFn1(myFn2); // 32
	localFn3 = \localFn32 : (int) -> int -> println(localFn32(79));
	myFn1(localFn3); // 80

	myFn1(\incfn -> {
        printiL = \v : int -> {
			lambda2 = \v2 -> v2 + rate;
			println(lambda2(v + step));
		}
        printiL(incfn(30 + rate));
    }); // 137
	
	{}
}

//  TODO: s2d

// import math/math;
// import string_utils;
native println : io (flow) -> void = Native.println;
native strlen : (string) -> int = Native.strlen;
native substring : (s : string, start : int, length : int) -> string = Native.substring;
native getCharCodeAt : (s : string, i : int) -> int = Native.getCharCodeAt;
native i2d : (i : int) -> double = Native.i2d;


s2d(s) {
	n = strlen(s);
	if (n == 0) {
		0.0
	} else {
		negative = (getCharCodeAt(s, 0) == 0x2d); // -
		if (negative) {
			-s2dint(s, 1, n, 0.0);
		} else {
			s2dint(s, 0, n, 0.0);
		}
	}
}

// Handle the integer part at the start
s2dint(s : string, i : int, n : int, acc : double) -> double {
	if (i < n) {
		c = getCharCodeAt(s, i);
		d = getDigitCode(c);
		if (d != -1) {
			s2dint(s, i + 1, n, 10.0 * acc + i2d(d));
		} else {
			if (c == 0x2E) { // .
				fracres : Pair<double, double> = s2dfrac(s, i + 1, n, acc, 10.0);
				mult = 10.0 * fracres.first;
				if (isNanOrInf(mult)) fracres.first / fracres.second * 10.0
				else mult / fracres.second
			} else if (c == 0x45 || c == 0x65) { // E e
				s2dexp(s, i + 1, n, acc);
			} else {
				acc;
			}
		}
	} else {
		acc;
	}
}
// Convert ascii code to number for "0"-"9"
getDigitCode(c : int) -> int {
	if (0x30 <= c && c <= 0x39) c - 0x30 // 0-9, 0
	else -1
}
Pair(first : ?, second : ??);
s2dfrac(s : string, i : int, n : int, acc : double, fracacc : double) -> Pair<double, double> {
	if (i < n) {
		c = getCharCodeAt(s,i);
		d = getDigitCode(c);
		if (d != -1) {
			fracres = s2dfrac(s, i + 1, n, acc * 10.0 + i2d(d), fracacc * 10.0);
			Pair(fracres.first, fracres.second);
		} else {
			if (c == 0x45 || c == 0x65) { // E e
				Pair(s2dexp(s, i + 1, n, acc / fracacc), 1.0);
			} else {
				Pair(acc, fracacc);
			}
		}
	} else {
		Pair(acc, fracacc);
	}
}
// Handle the exponent
s2dexp(s : string, i : int, n : int, acc : double) -> double {
	if (i < n) {
		c = getCharCodeAt(s, i);
		expNeg = c == 0x2d; // -
		expPos = c == 0x2b; // +
		exponent = s2i2(s, i + b2i(expNeg || expPos), n, 0); //\111111111111111
		shiftExponent(acc, if (expNeg) -exponent else exponent);
	} else {
		acc;
	}
}
b2i(b : bool) -> int { if (b) 1 else 0; }
shiftExponent(acc : double, exponent : int) -> double {
	// Though this code looks better, it could loose the last symbol (e.g. for 9.10000985294723e-016)
	//   if (exponent < 0) acc / dpow(10.0, exponent)
	//  else acc * dpow(10.0, exponent)
	if (exponent == 0) acc
	else if (exponent < 0) shiftExponent(acc / 10.0, exponent + 1)
	else shiftExponent(acc * 10.0, exponent - 1)
}
isNanOrInf(d : double) -> bool {
	(d == 2.0 * d && d != 0.0)  // works for inf and nan
	|| d != d // works for 0/0
}
// Get integer part from this position
s2i2(s : string, i : int, n : int, acc : int) -> int {
	if (i < n) {
		c = getCharCodeAt(s, i);
		d = getDigitCode(c);
		if (d != -1) {
			s2i2(s, i + 1, n, 10 * acc + d)
		} else {
			acc;
		}
	} else acc
}


foldRange(start : int, end : int, acc : ?, fn : (?, int) -> ?) -> ? {
	if (start <= end) {
		foldRange(start + 1, end, fn(acc, start), fn)
	} else {
		acc;
	}
}
max(a : ?, b : ?) -> ? { if (a > b) a else b; }
stringFoldChar(s : string, a : ?, f : (?, string) -> ?) -> ? {
	foldRange(0, strlen(s) - 1, a, \a2 : ?, i : int -> f(a2, getCharAt(s, i)));
}

getCharAt(s : string, n : int) -> string {
	substring(s, n, 1)
}
/*
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

*/

euler8(digits : string, len : int) -> double {
    foldRange(0, strlen(digits) - len - 1, 0.0, \greatest, i -> {
        numbers = substring(digits, i, len);
        product = stringFoldChar(numbers, 1.0, \acc, d -> {
            acc * s2d(d)
        });
        max(product, greatest)
    });
}

main() {
    digits = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
    println(euler8(digits, 13)); // Correct: 23514624000
    // quit(0);
}

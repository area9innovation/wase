//  TODO: bitset, log

// import runtime;
import euler/bitset_euler;

native i2d : (i : int) -> double = Native.i2d;
native println : io (flow) -> void = Native.println;


//fori(start, end, fn) {
fori(start : int, end : int, fn : (int) -> void ) {
	if (start <= end) {
		fn(start);
		fori(start + 1, end, fn);
	}
}
// E_CONST = 2.718281828459045235360287471352662497757247093699959574966967;
round(d) floor(d + 0.5);
floor(d) trunc(
	if (d >= 0.0) d
	else if (-d - i2d(trunc(-d)) > 0.0) d-1.0
	else d
);
native trunc : (d : double) -> int = Native.trunc;
native log : (double) -> double = Native.log;

either(m : Maybe<?>, alternative: ?) -> ? {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): v;
	}
}

/*
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see 
that the 6th prime is 13.

What is the 10 001st prime number?
*/

// TODO: Rewrite to get number of remaining primes to find,
// so we can stop early instead of keep going. That will
// also allow us to avoid the refs in the main loop.

// Erasthoses sieve
sieve(n : int, set : BitSet, onPrime : (int) -> void) -> void {
    if (n < set.bitcount) {
        if (either(getBitSet(set, n), false)) {
            // OK, this is a prime. Mark the rest
            clearFactors(n + n, n, set);
            onPrime(n);
        };
        sieve(n + 1, set, onPrime);
    }
}

clearFactors(n : int, step : int, set : BitSet) -> void {
    if (n < set.bitcount) {
        unsetBitSet(set, n);
        clearFactors(n + step, step, set);
    }
}

euler7(target : int) -> void {
    // HACK: Upper bound for how many numbers we have to search
    // for the Nth prime.
    // This is speculative. If we do not find it, the
    // result will be 0. Then increase this bound.
	E_CONST = 2.718281828459045235360287471352662497757247093699959574966967;
    size = target * round(E_CONST * log(i2d(target))); 

    // OK, make a set filled with 1
    set = makeBitSet(size);
    fori(2, size, \i -> {
        setBitSet(set, i);
        {}
    });

    // Now, run the sieve and knock out factors, this way
    // finding primes
    count = ref 0;
    //sieve(2, set, \prime : int -> {
	sieve(2, set, \prime -> {
        // This is called whenever we find a prime
        count := ^count + 1;
        if (^count == target) {
            println(prime);  // Correct: 104743
        }
    });
}

main() {
    euler7(10001); // 104743
    // quit(0);
}

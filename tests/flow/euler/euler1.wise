include lib/wise/runtime;
include tools/flowc/backends/wise/lib/reference;
include tools/flowc/backends/wise/lib/tuple;
include tools/flowc/backends/wise/lib/array;
include tools/flowc/backends/wise/lib/string;

 foldRange[A](start : i32, end : i32, acc : A, fn : i32, __closure__ : i32) -> A {
	
	if ((start <= end)) {
	foldRange[i32]((start + 1), end, getStructValue[(i32, i32, (A, i32, i32) -> A, i32)](fn).2(acc, start, getStructValue[(i32, i32, (A, i32, i32) -> A, i32)](fn).3), fn, __closure__)
} else {
	acc
}
}

 euler1(limit : i32, __closure__ : i32) -> i32 {
	
	foldRange[i32](1, (limit - 1), 0, createStruct[((i32, i32, i32) -> i32, i32)](4, (euler_euler1__lambda__514__0, createStruct[()](5, ()),)), __closure__)
}

 export _start() -> () {
	initMemory();
	printlni32(euler1(1000, 0))
}

 euler_euler1__lambda__514__0(acc : i32, i : i32, __closure__ : i32) -> i32 {
	
	if ((((i % 3) == 0) || ((i % 5) == 0))) {
	(acc + i)
} else {
	acc
}
}

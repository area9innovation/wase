
include lib/wise/runtime;
include tools/flowc/backends/wise/lib/array;
include tools/flowc/backends/wise/lib/string;

 makeTuple1(t : (i32, f64)) -> (i32, ((i32, f64), f64), ((i32, f64), f64), i32) {
	
	(87, (t, 1.56), ((9, 9.08), 21.9), -8)
}

 mktuple() -> (i32, f64) {
	
	(1, 3.141)
}

 nested() -> (i32, (i32, f64)) {
	
	(1, (2, 1.1))
}

 export _start() -> auto {
	initMemory();
	t10 : (i32, f64) = (1, 3.141);
	t11 : (i32, f64) = mktuple();
	fi : f64 = t11.1;
	
	printlnf64(fi);
	i1 : i32 = (345, 3.141).0;
	
	printlni32(i1);
	f2 : f64 = mktuple().1;
	
	printlnf64(f2);
	printlni32(mktuple().0);
	k : i32 = 111;
	f : f64 = 3.141;
	st : (i32, f64) = (k, f);
	v : (i32, (i32, f64)) = (123, st);
	
	printlni32((v.1.0 + 1));
	i2 : i32 = (123, (678, 3.141)).1.0;
	
	printlni32(i2);
	i3 : i32 = nested().1.0;
	
	printlni32(i3);
	i4 : i32 = makeTuple1(mktuple()).1.0.0;
	
	printlni32(i4);
	si : i32 = trunc_s<>(fi);
	
	printlni32(si);
	t22 : (i32, f64) = if (true) {
	(11, 0.0)
} else {
	t11
};
	t23 : (i32, (i32, f64)) = (1, t11);
	
	printlni32(t22.0);
	t30 : (i32, (i32, f64)) = nested();
	t31 : (i32, (i32, f64)) = (6, (7, 8.8));
	t32 : ((i32, f64), i32) = (mktuple(), 1);
	t40 : ((i32, f64), i32) = ((9, 9.9), 10);
	
	printlni32(t40.0.0);
	printlnf64(t40.0.1);
	printlni32(t40.1);
	t50 : ((i32, ((i32, f64), f64), ((i32, f64), f64), i32), i32, f64) = ((3, ((7, 0.0), 9.3), ((8, 10.4), 6.4), 4), 1, 2.2);
	
	printlni32(t50.0.2.0.0);
	r3 : (i32, (i32, f64)) = if (true) {
	t31
} else {
	(1, (2, 1.1))
};
	
	printlni32(r3.1.0);
	();
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	
}

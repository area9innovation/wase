include lib/wise/runtime;
include tools/flowc/backends/wise/lib/tuple;
include tools/flowc/backends/wise/lib/array;
include tools/flowc/backends/wise/lib/string;

 makeTuple1(t : i32, __closure__ : i32) -> i32 {
	
	createStruct[(i32, i32, i32, i32)](3, (87, createStruct[(i32, f64)](2, (t, 1.56,)), createStruct[(i32, f64)](2, (createStruct[(i32, f64)](5, (9, 9.08,)), 21.9,)), -8,))
}

 mktuple(__closure__ : i32) -> i32 {
	
	createStruct[(i32, f64)](5, (1, 3.141,))
}

 nested(__closure__ : i32) -> i32 {
	
	createStruct[(i32, i32)](8, (1, createStruct[(i32, f64)](5, (2, 1.1,)),))
}

 export _start() -> () {
	initMemory();
	t10 : i32 = {createStruct[(i32, f64)](5, (1, 3.141,))};
	t11 : i32 = {mktuple(0)};
	fi : f64 = {getStructValue[(i32, i32, i32, f64)](t11).3};
	{
	printlnf64(fi);
	i1 : i32 = {getStructValue[(i32, i32, i32, f64)](createStruct[(i32, f64)](5, (345, 3.141,))).2};
	{
	printlni32(i1);
	f2 : f64 = {getStructValue[(i32, i32, i32, f64)](mktuple(0)).3};
	{
	printlnf64(f2);
	printlni32(getStructValue[(i32, i32, i32, f64)](mktuple(0)).2);
	k : i32 = {111};
	f : f64 = {3.141};
	st : i32 = {createStruct[(i32, f64)](5, (k, f,))};
	v : i32 = {createStruct[(i32, i32)](8, (123, st,))};
	{
	printlni32((getStructValue[(i32, i32, i32, f64)](getStructValue[(i32, i32, i32, i32)](v).3).2 + 1));
	i2 : i32 = {getStructValue[(i32, i32, i32, f64)](getStructValue[(i32, i32, i32, i32)](createStruct[(i32, i32)](8, (123, createStruct[(i32, f64)](5, (678, 3.141,)),))).3).2};
	{
	printlni32(i2);
	i3 : i32 = {getStructValue[(i32, i32, i32, f64)](getStructValue[(i32, i32, i32, i32)](nested(0)).3).2};
	{
	printlni32(i3);
	i4 : i32 = {getStructValue[(i32, i32, i32, f64)](getStructValue[(i32, i32, i32, f64)](getStructValue[(i32, i32, i32, i32, i32, i32)](makeTuple1(mktuple(0), 0)).3).2).2};
	{
	printlni32(i4);
	si : i32 = {trunc_s<>(fi)};
	{
	printlni32(si);
	t22 : i32 = {if (true) {
	createStruct[(i32, f64)](5, (11, 0.0,))
} else {
	t11
}};
	t23 : i32 = {createStruct[(i32, i32)](8, (1, t11,))};
	{
	printlni32(getStructValue[(i32, i32, i32, f64)](t22).2);
	t30 : i32 = {nested(0)};
	t31 : i32 = {createStruct[(i32, i32)](8, (6, createStruct[(i32, f64)](5, (7, 8.8,)),))};
	t32 : i32 = {createStruct[(i32, i32)](7, (mktuple(0), 1,))};
	t40 : i32 = {createStruct[(i32, i32)](7, (createStruct[(i32, f64)](5, (9, 9.9,)), 10,))};
	{
	printlni32(getStructValue[(i32, i32, i32, f64)](getStructValue[(i32, i32, i32, i32)](t40).2).2);
	printlnf64(getStructValue[(i32, i32, i32, f64)](getStructValue[(i32, i32, i32, i32)](t40).2).3);
	printlni32(getStructValue[(i32, i32, i32, i32)](t40).3);
	t50 : i32 = {createStruct[(i32, i32, f64)](4, (createStruct[(i32, i32, i32, i32)](3, (3, createStruct[(i32, f64)](2, (createStruct[(i32, f64)](5, (7, 0.0,)), 9.3,)), createStruct[(i32, f64)](2, (createStruct[(i32, f64)](5, (8, 10.4,)), 6.4,)), 4,)), 1, 2.2,))};
	{
	printlni32(getStructValue[(i32, i32, i32, f64)](getStructValue[(i32, i32, i32, f64)](getStructValue[(i32, i32, i32, i32, i32, i32)](getStructValue[(i32, i32, i32, i32, f64)](t50).2).4).2).2);
	r3 : i32 = {if (true) {
	t31
} else {
	createStruct[(i32, i32)](8, (1, createStruct[(i32, f64)](5, (2, 1.1,)),))
}};
	{
	printlni32(getStructValue[(i32, i32, i32, f64)](getStructValue[(i32, i32, i32, i32)](r3).3).2);
	t60 : i32 = {createStruct[(i32, i32)](6, (createStruct[()](1, ()), 11,))};
	r4 : i32 = {getStructValue[(i32, i32, i32, i32)](t60).3};
	{
	printlni32(r4);
	();
	};
	};
	};
	};
	};
	};
	};
	};
	};
	};
	};
	};
	}
}

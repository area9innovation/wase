include lib/vector;

export memory 32;

print_bytes() -> () {
	var i = 33;
	loop {
		printByte(i);
		i := i + 1;
		// Breaks out of _start function
		break_if<1>(i > 47);
		// This is really continue
		break<>();
	};
}

test_v128_const() -> () {
	print_bytes();
	printByte(10);

	val : v128 = v128.const<33,34,35,36,37,38,39,40,41,41,42,43,44,45,46,47>();
	printv128(val);
	printByte(10); // new line

	// Test val: lane by lane
	println_i8x16(val);

	val1 : v128 = v128.const<572727841,640099877,707471913,774843949>();
	printv128(val1);
	printByte(10);
	
	// Test val1: lane by lane
	println_i32x4(val1);
}

test_arithmetics() -> () {
	a = v128.const<0, 1, 2, 3>();
	b = v128.const<1, 2, 4, 8>();
	c = v128.const<5, 6, 7, 8>();

	println_i32x4(i32x4.add<>(a, b));
	println_i32x4(i32x4.mul<>(a, b));
	println_i32x4(i32x4.add<>(a, c));
	println_i32x4(i32x4.mul<>(a, c));
	println_i32x4(i32x4.add<>(b, c));
	println_i32x4(i32x4.mul<>(b, c));
}

export _start() -> () {
	test_v128_const();
	test_arithmetics();
    {}
}
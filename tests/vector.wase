include lib/vector;

export memory 2;

print_bytes() -> () {
	var i = 33;
	loop {
		printByte(i);
		i := i + 1;
		// Breaks out of _start function
		break_if<1>(i > 47);
		// This is really continue
		break<>();
	};
}

test_v128_const() -> () {
	print_bytes();
	printByte(10);

	val : v128 = v128.const<33,34,35,36,37,38,39,40,41,41,42,43,44,45,46,47>();
	printv128(val);
	printByte(10); // new line

	// Test val: lane by lane
	println_i8x16(val);
}

test_arithmetics() -> () {
	a = v128.const<0, 1, 2, 3>();
	b = v128.const<1, 2, 4, 8>();
	c = v128.const<5, 6, 7, 8>();

	println_i32x4(i32x4.add<>(a, b));
	println_i32x4(i32x4.mul<>(a, b));
	println_i32x4(i32x4.add<>(a, c));
	println_i32x4(i32x4.mul<>(a, c));
	println_i32x4(i32x4.add<>(b, c));
	println_i32x4(i32x4.mul<>(b, c));
}


test_load_store() -> () {

	shift = 128;

	// Test store/load of a v128
	v = v128.const<0, 1, 2, 3, 4, 5, 6, 7>();
	println_i16x8(v);

	v128.store<>(0 + shift, v);
	w = v128.load<>(0 + shift);
	println_i16x8(w);

	// Test store/load of a v128 lane-wise
	x = v128.const<5, 6, 7, 8>();
	println_i32x4(x);

	v128.store32_lane<0,2,0>(0 + shift, x);
	v128.store32_lane<0,2,1>(4 + shift, x);
	v128.store32_lane<0,2,2>(8 + shift, x);
	v128.store32_lane<0,2,3>(12 + shift, x);

	printi32(load<>(0 + shift)); printByte(32);
	printi32(load<>(4 + shift)); printByte(32);
	printi32(load<>(8 + shift)); printByte(32);
	printi32(load<>(12 + shift)); printByte(32);

	printByte(10);
}

test_set_lanes() -> () {
	println_i32x4(set_lanes_i32x4(v128.const<>(), 1, 2, 3, 4));
	println_i32x4(set_lanes_i32x4(v128.const<>(), -1, -2, -3, -4));
	println_i32x4(set_lanes_i32x4(v128.const<>(), 9999, 8888, 7777, 6666));
	println_i32x4(set_lanes_i32x4(v128.const<>(), -9999, -8888, -7777, -6666));
}

export _start() -> () {
	test_v128_const();
	test_arithmetics();
	test_load_store();
	test_set_lanes();
    {}
}

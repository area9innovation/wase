foo() -> i32 {
	1;
}

memory 1;

export "_start" start() -> () {
	-3.1;

	ref = ref.func<foo>();

	con1 : i32 = 1;
	con2 : i32 = 0x12345678;
	con3 : i64 = 1w;
	con4 : i64 = 0x123456789ABCDEF0w;
	con5 : f32 = 0xDEADBEEFn;
	con6 : f64 = 1.0;
	con7 : f64 = 0xDEADBEEFh;

	a = clz<>(2);
	b = ctz<>(23);
	c = popcnt<>(23);

	f1 : i32 = shl<>(32, 1);
	f2 : i32 = shr_s<>(32, 1);
	f3 : i32 = shr_u<>(32, 1);
	f4 : i32 = rotl<>(32, 1);
	f5 : i32 = rotr<>(32, 1);
	f6 : i32 = eqz<>(32);
	f7 : i32 = div_u<>(32, 2);
	f8 : i32 = rem_u<>(32, 2);
	f9 : i32 = extend8_s<>(1);
	f10 : i32 = extend16_s<>(1);

	e1 : i64 = load<>(0);
	e2 : i64 = load<>(8);

	g1 : i64 = shl<>(e1, e1);
	g2 : i64 = shr_s<>(e1, e1);
	g3 : i64 = shr_u<>(e1, e1);
	g4 : i64 = rotl<>(e1, e1);
	g5 : i64 = rotr<>(e1, e1);
	g6 : i32 = eqz<>(e1);
	g7 : i64 = div_u<>(e1, e2);
	g8 : i64 = rem_u<>(e1, e2);

	g9 : i32 = wrap<>(e1);
	g10 : i64 = extend_s<>(1);
	g11 : i64 = extend_u<>(1);
	g12 : i64 = extend8_s<>(e1);
	g13 : i64 = extend16_s<>(e1);

	h1 : f32 = load<>(0);
	h2 = abs<>(h1);
	h3 = ceil<>(h1);
	h4 = floor<>(h1);
	h5 = trunc<>(h1);
	h6 = nearest<>(h1);
	h7 = sqrt<>(h1);
	h8 = min<>(h1, h2);
	h9 = max<>(h1, h2);
	h10 = copysign<>(h1, h2);

	k1 : f64 = load<>(0);
	k2 = abs<>(k1);
	k3 = ceil<>(k1);
	k4 = floor<>(k1);
	k5 = trunc<>(k1);
	k6 = nearest<>(k1);
	k7 = sqrt<>(k1);
	k8 = min<>(k1, k2);
	k9 = max<>(k1, k2);
	k10 = copysign<>(k1, k2);

	i1 = lt_u<>(1, 2);
	i2 = gt_u<>(1, 2);
	i3 = le_u<>(1, 2);
	i4 = ge_u<>(1, 2);

	j1 = lt_u<>(e1, e2);
	j2 = gt_u<>(e1, e2);
	j3 = le_u<>(e1, e2);
	j4 = ge_u<>(e1, e2);

	// Truncations
	int32_1 : i32 = trunc_s<>(h1);
	int32_2 : i32 = trunc_s<>(k1);
	int32_3 : i32 = trunc_u<>(h1);
	int32_4 : i32 = trunc_u<>(k1);
	int32_5 : i32 = trunc_sat_s<>(h1);
	int32_6 : i32 = trunc_sat_s<>(k1);
	int32_7 : i32 = trunc_sat_u<>(h1);
	int32_8 : i32 = trunc_sat_u<>(k1);

	int64_1 : i64 = trunc_s<>(h1);
	int64_2 : i64 = trunc_s<>(k1);
	int64_3 : i64 = trunc_u<>(h1);
	int64_4 : i64 = trunc_u<>(k1);
	int64_5 : i64 = trunc_sat_s<>(h1);
	int64_6 : i64 = trunc_sat_s<>(k1);
	int64_7 : i64 = trunc_sat_u<>(h1);
	int64_8 : i64 = trunc_sat_u<>(k1);

	// Conversions
	co1 : f32 = convert_s<>(1);
	co2 : f32 = convert_u<>(1);
	co3 : f32 = convert_s<>(e1);
	co4 : f32 = convert_s<>(e2);
	co5 : f64 = convert_s<>(1);
	co6 : f64 = convert_u<>(1);
	co7 : f64 = convert_s<>(e1);
	co8 : f64 = convert_s<>(e2);

	// Reinterpretation
	ri1 : i32 = reinterpret<>(h1);
	ri2 : f32 = reinterpret<>(1);
	ri3 : i64 = reinterpret<>(1.0);
	ri4 : f64 = reinterpret<>(e1);

	// Float conversions
	fl1 : f32 = demote<>(1.0);
	fl2 : f64 = promote<>(h1);
	{}
}

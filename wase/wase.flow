import wase/parse;
import tools/dsl/dsl_include;
import wase/type;
import wase/compile;
import wase/wase_parse_typed;
import wase/wase_types2dsl;
import wase/dce;
import wase/pretty_wase;
import wase/pretty_wase_ast;
import formats/wasm/wasm_encode;
import formats/json/flow2json;


compileDslProgram2wasm(includes : [string], program : DslAst, filename : string) -> WasmModule {
	include = DslInclude(includes, [".wase"], "wase_include", "wase_empty", \path, file, content -> {
		parseWase(path, content);
	}, ref makeSet());
	extended = processDslIncludes(include, program);
	typed = typeWase(extended);

	if (isUrlParameterTrue("debug-type")) {
		println("Typed '" + filename + "'':");
		println(prettyDsl(typed));
	}

	wase0 = dsl2wase(\node, error -> {
		println(filename + ": " + error)
	}, typed);

	// Dead code optimization
	dce = getUrlParameterDef("dce", "1");
	wase = if (dce == "0") wase0 else performDCE(wase0, dce);

	if (isUrlParameterTrue("debug-wase")) {
		println("\nAs wase:");
		println(prettyWase(wase));
	}

	wase2wasm(wase);
}


compileWase2File(includes : [string], filename : string, code : string) -> Promise<int, string> {
	Promise(\onDone : (int) -> void, onError : (string) -> void -> {
		println("\nCompiling '" + filename + "'");
		program = parseWase(filename, code);
		wasm = compileDslProgram2wasm(includes, program, filename);
		bytes = wasmModule2bytes(wasm);
		if (isUrlParameterTrue("test-generated-ast")) {
			prog1 = parseWeDecl(code, \err -> println("Error: " + err));
			program1 = waseAst2DslAst(prog1);
			wasm1 = compileDslProgram2wasm(includes, program1, filename);
			bytes1 = wasmModule2bytes(wasm1);
			if (bytes == bytes1) {
				println("programms COINCIDE");
			} else {
				println("programms:\n" +
					prettyWaseAst(prog1) + "\n" +
					"\n------- DSL PROGRAM -------------\n" +
					prettyDsl(program) + "\n\n"
					"\n------- DSL PROGRAM1 -------------\n" +
					prettyDsl(program1) + "\n\n" +
					"\n------- WASM PROGRAM -------------\n" +
					json2stringFormatted(flow2json(wasm)) + "\n\n"
					"\n------- WASM PROGRAM1 -------------\n" +
					json2stringFormatted(flow2json(wasm1)) + "\n\n"
				);
			}
		}
		filebase = changeFileExt(filename, "");
		ok = setFileContentBytes(filebase + ".wasm", 
			fold(bytes, "", \acc, byte -> {
				acc + fromCharCode(byte)
			})
		);
		if (ok) {
			println("  '" + filebase + ".wasm' saved");
			if (isUrlParameterTrue("wat")) {
				args = concat([
						filebase + ".wasm", "-o", filebase + ".wat",
						//"--enable-all", 
					], if (isUrlParameterTrue("no-check")) ["--no-check"] else [],
				);
				startProcess("wasm2wat", args, ".", "", \ec : int, so, se -> {
					if (ec == 0) {
						println("  '" + filebase + ".wat' generated");
						onDone(ec);
					} else {
						onError(filename + ":\n" + so + se);
					}
				});
			} else onDone(0);
		} else {
			onError("Could not save " + filebase + ".wasm saved")
		}
	});
}

main() {
	includes = strSplit(getUrlParameter("I"), ",");
	files0 : [string] = filtermap(getAllUrlParametersArray(), \a -> if (a[1] == "") Some(changeFileExt(a[0], ".wase")) else None());
	files = if (files0 != []) files0 else {
		if (isUrlParameterTrue("test")) {
			test = getUrlParameter("test");
			testFolder = if (test == "1") "tests" else test;
			tests = readDirectory(testFolder);
			filtermap(tests, \t -> if (endsWith(t, ".wase")) Some(pathCombine(testFolder, t)) else None());
		} else [];
	}
	if (files == []) {
		printWaseHelp();
		quit(1);
	} else {
		compiles : [Promise<int, string>]= map(files, \file0 -> {
			file = resolveDslFile(includes, file0);
			if (fileExists(file)) {
				compileWase2File(includes, file, getFileContent(file))
			} else {
				Promise(\__, onError -> onError(file0 + " not found"));
			}
		});
		all : Promise<[int], string> = allP(compiles);
		doneP(all, \__ -> quit(0), \error -> {
			println(error);
			quit(1);
		});
	}
}

printWaseHelp() -> void {
	println("wase <files> - Compiles the files to <file>.wasm files");
	println("  I=<path>,...   Defines the include path for resolving .wase files and includes");
	println("");
	println("  wat=1          Produce .wat disassembly using wasm2wat");
	println("  nocheck=1      Pass --nocheck to wasm2wat when producing .wat for invalid Wasm");
//	println("  run=wasm3        Runs the .wasm using wasm3");
//	println("  run=wasmer       Runs the .wasm using wasmer");
	println("");
	println("  verbose=1      Print how includes are resolved to files");
	println("");
	println("  test=1         Compiles all test cases in the tests/ folder");
	println("  debug-type=1   Output the resulting typed AST");
	println("  debug-wase=1   Output the internal intermediate WASE representation");
	println("  dce=1          Perform a dead code optimization (if on by default)");
	println("  dce=0          Skip a dead code optimization");
	println("  dce=id1,id2,.. Perform a dead code optimization with a list of given ids preserved");
	println("  dce-verbose=1  Show dead toplevels");
}

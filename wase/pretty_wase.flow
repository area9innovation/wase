import wase/wase_types;
import runtime;

export {
	prettyWase(w : Wase) -> string;
}

prettyWase(w : Wase) -> string {
	switch (w) {
		WaseImportFunction(id, module, name, type, scope): {
			"import " + id + " : " + toString(type) + " = " + module + "." + name + ";"
			+ "\n\n" + prettyWase(scope);
		}
		WaseImportGlobal(id, module, name, type, isMutable, scope): {
			"import " + id + " : " + (if (isMutable) "mutable "  else "") + toString(type) + " = " + module + "." + name + ";"
			+ "\n\n" + prettyWase(scope);
		}
		WaseImportMemory(module, name, minimumPages, maximumPages, scope): toString(w);
		WaseImportTable(id, module, name, refType, minimumPages, maximumPages, scope): toString(w);
		WaseMemory(minimumPages, maximumPages, exportid, scope): {
			exportid + " memory " + toString(minimumPages) + (if (maximumPages != 0) " " + toString(maximumPages) else "")  + ";"
			+ "\n\n" + prettyWase(scope);
		}
		WaseGlobal(id, exportid, type, isMutable, init, scope): {
			id + " : " + toString(type) + " = " + toString(init) + ";"
			+ " // " + exportid + " " + b2s(isMutable) 
			+ "\n\n" + prettyWase(scope);
		}
		WaseFunction(id, exportid, start, type, args, code, scope): {
			id + "(" + toString(type.params) + ") -> " + toString(type.returns) + " {"
			+ " // " + exportid + " " + b2s(start) + " " + toString(args)
			+ "\n\t" + toString(code) 
			+ "\n}" 
			+ "\n\n" + prettyWase(scope);
		}
		WaseData(offset, bytes, scope): {
			"data " + toString(bytes) + ";" + " " + toString(offset)
			+ "\n\n" + prettyWase(scope);
		}
		WaseElements(offset, fns, scope): {
			"element " + strGlue(fns, ",") + ";" + " " + toString(offset)
			+ "\n\n" + prettyWase(scope);
		}
		WaseEmpty(): "end";
	}
}

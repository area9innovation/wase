// Automatically generated from Gringo grammar
import ds/list;

export {
	// This is a monster type used when parsing
	WaseAst ::= WaseAstList, WaseAstBool, WaseAstInt, WaseAstDouble, WaseAstString, WeAtom, WeDataoffset, WeDatavalue, WeDecl, WeExp, WeImport, WeInstruction, WeWarg, WeAdd, WeAnd, WeArray, WeBlock, WeBrace, WeCall, WeData, WeDiv, WeDouble, WeEqual, WeFnType, WeFunction, WeGlobal, WeGreater, WeGreaterEqual, WeHex32, WeHex64, WeHexf32, WeHexf64, WeI64, WeIdtype, WeIf, WeIfelse, WeImportFun, WeImportGlobal, WeImportMemory, WeImportTable, WeInt, WeIsNull, WeLess, WeLessEqual, WeLet, WeLettuple, WeLoop, WeMemory, WeMod, WeMul, WeNegate, WeNotEqual, WeOr, WeReturn, WeSet, WeString, WeSub, WeTee, WeType, WeTypeAnnotation, WeVar, WeWaseEmpty, WeWaseInclude, WeWasmOp, WeXor, WeZreturn;

	WaseAstList(value : List<WaseAst>);
	WaseAstBool(value : bool);
	WaseAstInt(value : int);
	WaseAstDouble(value : double);
	WaseAstString(value : string);

	WeAtom ::= WeArray, WeDouble, WeHex32, WeHex64, WeHexf32, WeHexf64, WeI64, WeIf, WeIfelse, WeInt, WeSet, WeTee, WeVar, WeInstruction;
	WeDataoffset ::= WeInt, WeExp;
	WeDatavalue ::= WeDouble, WeInt, WeString;
	WeDecl ::= WeData, WeFunction, WeGlobal, WeImport, WeMemory, WeWaseEmpty, WeWaseInclude;
	WeExp ::= WeAdd, WeAnd, WeAtom, WeBrace, WeCall, WeDiv, WeEqual, WeGreater, WeGreaterEqual, WeIsNull, WeLess, WeLessEqual, WeLet, WeLettuple, WeMod, WeMul, WeNegate, WeNotEqual, WeOr, WeSub, WeTypeAnnotation, WeWasmOp, WeXor;
	WeImport ::= WeImportFun, WeImportGlobal, WeImportMemory, WeImportTable;
	WeInstruction ::= WeBlock, WeLoop, WeReturn, WeZreturn;
	WeWarg ::= WeInt, WeString, WeType;
	WeAdd(exp1 : WeExp, exp2 : WeExp);
	WeAnd(exp1 : WeExp, exp2 : WeExp);
	WeArray(exps : [WeExp]);
	WeBlock(brexps : [WeExp]);
	WeBrace(brexps : [WeExp]);
	WeCall(exp : WeExp, exps : [WeExp]);
	WeData(id : string, dataSize : string, dataList : [WeDatavalue], dataOffset : WeDataoffset, decl : WeDecl);
	WeDiv(exp1 : WeExp, exp2 : WeExp);
	WeDouble(double_0 : double);
	WeEqual(exp1 : WeExp, exp2 : WeExp);
	WeFnType(types : [WeType], typeList : [WeType]);
	WeFunction(id : string, optexport : string, lambdaArgs : [WeIdtype], typeList : [WeType], exp : WeExp, decl : WeDecl);
	WeGlobal(id : string, optexport : string, type : WeType, optmutable : int, exp : WeExp, decl : WeDecl);
	WeGreater(exp1 : WeExp, exp2 : WeExp);
	WeGreaterEqual(exp1 : WeExp, exp2 : WeExp);
	WeHex32(s : string);
	WeHex64(s : string);
	WeHexf32(s : string);
	WeHexf64(s : string);
	WeI64(s : string);
	WeIdtype(id : string, type : WeType);
	WeIf(exp1 : WeExp, exp2 : WeExp);
	WeIfelse(exp1 : WeExp, exp2 : WeExp, exp3 : WeExp);
	WeImportFun(id1 : string, fn_type : WeFnType, id2 : string, id3 : string, decl : WeDecl);
	WeImportGlobal(id1 : string, type : WeType, optmutable : int, id2 : string, id3 : string, decl : WeDecl);
	WeImportMemory(int_0 : int, int_def : int, id1 : string, id2 : string, decl : WeDecl);
	WeImportTable(id1 : string, reftype : WeType, int_0 : int, int_def : int, id2 : string, id3 : string, decl : WeDecl);
	WeInt(int_0 : int);
	WeIsNull(exp : WeExp);
	WeLess(exp1 : WeExp, exp2 : WeExp);
	WeLessEqual(exp1 : WeExp, exp2 : WeExp);
	WeLet(id : string, i : int, opttype : WeType, exp : WeExp, expsemi : [WeExp]);
	WeLettuple(id : string, i : int, typeList : [WeType], exp : WeExp, expsemi : [WeExp]);
	WeLoop(brexps : [WeExp]);
	WeMemory(optexport : string, int_0 : int, int_def : int, decl : WeDecl);
	WeMod(exp1 : WeExp, exp2 : WeExp);
	WeMul(exp1 : WeExp, exp2 : WeExp);
	WeNegate(exp : WeExp);
	WeNotEqual(exp1 : WeExp, exp2 : WeExp);
	WeOr(exp1 : WeExp, exp2 : WeExp);
	WeReturn(exp : WeExp);
	WeSet(id : string, exp : WeExp);
	WeString(id : string);
	WeSub(exp1 : WeExp, exp2 : WeExp);
	WeTee(id : string, exp : WeExp);
	WeType(s : string);
	WeTypeAnnotation(exp : WeExp, typeList : [WeType]);
	WeVar(id : string);
	WeWaseEmpty();
	WeWaseInclude(s : string, decl : WeDecl);
	WeWasmOp(s : string, wargs : [WeWarg], exps : [WeExp]);
	WeXor(exp1 : WeExp, exp2 : WeExp);
	WeZreturn();
}

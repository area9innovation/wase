
import formats/wasm/wasm_types;

export {
	// This is an wrapper for Wasm to make it easier to produce a valid WASM module
	Wase ::=  WaseImportFunction, WaseImportGlobal, WaseImportMemory, WaseImportTable,
		WaseMemory, WaseGlobal, WaseFunction, WaseData, WaseEmpty;

	// This imported function will be bound to the id in the compilation environment
	// and can be referenced using WaseGet(id)
	WaseImportFunction(id : string, module : string, name : string, type : WasmFuncType,
		scope : Wase);

	// This imported global will be bound to the id in the compilation environment
	// and can be referenced using WaseGet(id)
	WaseImportGlobal(id : string, module : string, name : string, type : WasmValType, isMutable : bool,
		scope : Wase);

	// Import memory from the host
	WaseImportMemory(module : string, name : string, minimumPages : int, maximumPages : int,
		scope : Wase);

	// Import a table from the host. The table can be referenced using WaseGet(id)
	WaseImportTable(id : string, module : string, name : string, refType : WasmRefType, minimumPages : int, maximumPages : int,
		scope : Wase);

	// Declare our top-level memory. If exportid != "", we export this memory with that name
	// If maximumPages == 0, it is unbounded
	WaseMemory(minimumPages : int, maximumPages : int,
		exportid : string,
		scope : Wase);

	// Declare a global. If exportid != "", we export this global with that name
	// The index of this global will be bound to the id in the compilation environment
	WaseGlobal(id : string, exportid : string, type : WasmValType, isMutable : bool, 
		init : WaseExpr, scope : Wase);

	// Declare a function. If exportId != "", we export this function with that name
	// The index of this function will be bound to the id in the compilation environment.
	// If start is true, this function will be "main" and called as the first
	WaseFunction(id : string, exportid : string, start : bool, type : WasmFuncType, 
		args : [WaseLocal], code : WaseExpr, scope : Wase);
		// Should we extract these instead?
		WaseLocal(name : string, type : WasmValType);

	// Store binary data in a module, which can be initialized into memory.
	// The id will be bound to the address of the data
	WaseData(id : string, offset : WaseExpr, bytes : [int], scope : Wase);

	WaseExpr(instructions : [WaseInstruction]);
		WaseInstruction ::= WasmInstruction, WaseGet, WaseSet, WaseTee, WaseLet, WaseCall, 
			WaseBlock, WaseLoop, WaseIfElse, WaseIf, WaseRefFunc,
			WaseTableGrow, WaseTableSize, WaseTableCopy, WaseTableFill,
			WaseCallIndirect, WaseFunctionIndex;

			// Lookup in our compilation environment 
			// Resolves locals, globals, ref func, tables ids into the corresponding "get" instruction
			WaseGet(id : string);
			// Resolves local, global, table ids into the corresponding "get" instruction
			WaseSet(id : string);
			// Resolves local ids to local.tee instruction
			WaseTee(id : string);

			// Introduce a new local variable
			WaseLet(id : string, type : WasmValType);

			// Reference to a given function
			WaseRefFunc(id : string);

			// Simple wrappers allowing Wase inside
			WaseCall(fn : WaseInstruction);
			WaseBlock(blockType : WaseBlockType, instructions : [WaseInstruction]);
			WaseLoop(blockType : WaseBlockType, instructions : [WaseInstruction]);

			WaseIfElse(blockType : WaseBlockType, then : [WaseInstruction], else_ : [WaseInstruction]);
			WaseIf(blockType : WaseBlockType, then : [WaseInstruction]);

			// Tables:
			WaseTableGrow(id : string);
			WaseTableSize(id : string);
			WaseTableCopy(id1 : string, id2 : string);
			WaseTableFill(id : string);

			// Call indirect
			WaseCallIndirect(funcType : WasmFuncType, tableId : string);

			// Construct a function index as well as store in an elements table for call_indirect for this function
			WaseFunctionIndex(id : string);

			// Data:
			// memory.init, data.drop

	// OK, we convert the func type to an index for the WasmBlockType
	WaseBlockType ::= WasmBlockType, WasmFuncType;

	WaseEmpty();
}

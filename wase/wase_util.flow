import tools/dsl/dsl_ast;
import tools/dsl/dsl_util;

import runtime;

export {
	// Remove a top-level 'string', 'int', 'double' or 'bool' AST-node
	unwrapDslPrimitive(n : DslAst) -> DslAst;

	// Map a list with unwrapDslPrimitive
	unwrapDslPrimitiveList(x : DslAst) -> List<DslAst>;

	// convert the tree of types to array
	// example : ((int, float), int) -> [int, float, int]
	getDslTupleTypes(l : DslAst) -> [DslAst];

	isPrimitiveDslType(type : DslAst) -> bool;
}

unwrapDslPrimitive(n : DslAst) -> DslAst {
	switch (n) {
		DslNode(nm, as, __): {
			if (nm == "string" || nm == "int" || nm == "double" || nm == "bool") {
				as[0];
			} else {
				n;
			}
		}
		default: n;
	}
}

unwrapDslPrimitiveList(list : DslAst) -> List<DslAst> {
	mapList(getDslList(list), unwrapDslPrimitive);
}

getDslTupleTypes(l : DslAst) -> [DslAst] {

	v=switch (l : DslAst) {
		DslBool(__) : [l];
		DslInt(__) : [l];
		DslDouble(__) : [l];
		DslString(__) : [l];
		DslNode(__, __, __) : [l];
		DslList(v) : list2array(flatDslTypes(v, makeList()));
	}
println("BEFORE:: "+toString(l));
println("AFTER:: "+toString(v));v
}

flatDslTypes(l : List<DslAst>, acc : List<DslAst>) -> List<DslAst> {
	foldList(l, acc, \acc2, v -> {
		switch (v : DslAst) {
			DslBool(value) : Cons(v, acc2);
			DslInt(value) : Cons(v, acc2);
			DslDouble(value) : Cons(v, acc2);
			DslString(value) : Cons(v, acc2);
			DslNode(name, args, pos) : Cons(v, acc2);
			DslList(value) : flatDslTypes(value, acc2);
		}
	});
}

isPrimitiveDslType(type : DslAst) -> bool {
	switch (type : DslAst) {
		DslBool(__) : true;
		DslInt(__) : true;
		DslDouble(__) : true;
		DslString(__) : true;
		DslNode(__, __, __) : false;
		DslList(__) : false;
	}
}
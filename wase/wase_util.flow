import tools/dsl/dsl_ast;
import tools/dsl/dsl_util;

export {
	// Remove a top-level 'string', 'int', 'double' or 'bool' AST-node
	unwrapDslPrimitive(n : DslAst) -> DslAst;

	// Map a list with unwrapDslPrimitive
	unwrapDslPrimitiveList(x : DslAst) -> List<DslAst>;

	// convert the tree of types to array
	// example : ((int, float), int) -> [int, float, int]
	getDslTupleTypes(l : DslList) -> [DslAst];
}

unwrapDslPrimitive(n : DslAst) -> DslAst {
	switch (n) {
		DslNode(nm, as, __): {
			if (nm == "string" || nm == "int" || nm == "double" || nm == "bool") {
				as[0];
			} else {
				n;
			}
		}
		default: n;
	}
}

unwrapDslPrimitiveList(list : DslAst) -> List<DslAst> {
	mapList(getDslList(list), unwrapDslPrimitive);
}

getDslTupleTypes(l : DslList) -> [DslAst] {
	list2array(flatDslTypes(l, makeList()));
}

flatDslTypes(l : DslList, acc : List<DslAst>) -> List<DslAst> {
	foldList(l.value, acc, \acc2, v -> {
		switch (v : DslAst) {
			DslBool(value) : Cons(v, acc2);
			DslInt(value) : Cons(v, acc2);
			DslDouble(value) : Cons(v, acc2);
			DslString(value) : Cons(v, acc2);
			DslNode(name, args, pos) : Cons(v, acc2);
			DslList(value) : flatDslTypes(v, acc2);
		}
	});
}
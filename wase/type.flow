import tools/dsl/dsl_typing;
import wase/wase_util;

export {
	typeWase(ast : DslAst) -> DslAst;

	// Wise reuses a lot of this
	typecheckWase(acc : DslTypeAcc<?>, deep : bool, node : DslAst, getChildType : (int) -> DslAst) -> DslAst;
	mergeWaseTypes(acc : DslTypeAcc<?>, left : DslAst, right : DslAst) -> DslAst;
}

typeWase(ast : DslAst) -> DslAst {
	deep = ref false;
	acc = makeDslTypeAcc(false, mergeWaseTypes, \a, n, g -> typecheckWase(a, ^deep, n, g), \a, l, r -> false);

	// OK, first time, we do NOT go deep, but just grab the top-level names
	dslTypeInfer(acc, ast, false) |> ignore;

//	println(getTreeKeys(^(acc.env)));
//	println(getTreeValues(^(acc.env)));

	// Then go again, but this time deep and we resolve the final type
	deep := true;
	dslTypeInfer(acc, ast, true);
}

mergeWaseTypes(acc : DslTypeAcc<?>, left : DslAst, right : DslAst) -> DslAst {
	if (left == right) left
	else {
		println("TODO: Merge these types " + toString(left) + " and " + toString(right));
		left;
	}
}

typecheckWase(acc : DslTypeAcc<?>, deep : bool, node : DslAst, getChildType : (int) -> DslAst) -> DslAst {
	// println(summarizeDsl(node));
	switch (node) {
		DslBool(__): DslString("i32");
		DslInt(__): DslString("i32");
		DslDouble(__): DslString("f64");
		DslString(__): DslString("string");
		DslList(value): {
			DslList(mapiList(value, \i, __ -> getChildType(i)));
		}
		DslNode(name, args, pos): {
			if (name == "type") {
				if (getDslString(args[0]) == "auto") {
					makeDslTypeVar(acc)
				} else {
					args[0];
				}
			} else if (name == "fn_type" || name == "fntype") {
				fargtypes = getChildType(0);
				rettypes = getChildType(1);

				DslNode("func", [fargtypes, rettypes], 0);
			} else if (name == "global") {
				// (id, export : bool, type, mutable : bool, exp, body)
				gname = getDslString(args[0]);
				acc.errorPrefix := gname + ": ";
				type = getChildType(2);
				isMutable = getDslInt(args[3]);

				if (isMutable == 0) {
					// Record that this is NOT mutable
					acc.constants := insertSet(^(acc.constants), gname);
				}

				if (!deep && containsKeyTree(^(acc.env), gname)) {
					acc.onError(node, "Global '" + gname + "' is duplicate");
				}

				acc.env := setTree(^(acc.env), gname, type);

				if (deep) {
					// OK, safe the environment so we do not pollute it
					safeEnv = ^(acc.env);

					acc.blocks := [type];

					etype = getChildType(4);
					acc.unifyTypes(acc, type, etype);

					// Restore the global environment without locals
					acc.env := safeEnv;
				}

				getChildType(5);
			} else if (name == "function") {
				// function(id : string, export : bool, args : [idtype(id, type)], returnType, body, scope)
				fname = getDslString(args[0]);
				acc.errorPrefix := fname + ": ";

				fargtypes = getChildType(2);
				rettypes = getChildType(3);

				if (!deep && containsKeyTree(^(acc.env), fname)) {
					acc.onError(node, "function '" + fname + "' is duplicate");
				}

				// OK, special handling if the rettype is a single one
				rets = getDslList(rettypes);
				returnType = if (countList(rets) == 1) list2array(rets)[0] else rettypes;

				fntype = DslNode("func", [fargtypes, returnType], 0);
				acc.env := setTree(^(acc.env), fname, fntype);

				if (deep) {
					// OK, safe the environment so we do not pollute it
					safeEnv = ^(acc.env);

					if (countList(rets) == 1) {
						acc.blocks := [list2array(rets)[0]];
					} else {
						acc.blocks := [rettypes];
					}

					// OK, define the types of the arguments in the scope
					fargs = list2array(getDslList(args[2]));
					fargnames = map(fargs, \fa -> {
						idtype = getDslNode(fa);

						argname = getDslString(idtype.args[0]);
						if (containsKeyTree(^(acc.env), argname)) {
							acc.onError(node, "arg '" + argname + "' is shadowing in function `" + fname + "`");
						}

						argname;
					});
					// Remember and set the types of arguments
					prevTypes : [Maybe<DslAst>] = mapi(reverseA(list2array(getDslList(fargtypes))), \i, fargtype : DslAst -> {
						id = fargnames[i];
						etype = lookupTree(^(acc.env), id);
						acc.env := setTree(^(acc.env), id, fargtype);
						// println(id + " :" + prettyDsl(fargtype));
						etype;
					});

					// Check the type of the body
					bodyType = getChildType(4);
					acc.unifyTypes(acc, returnType, bodyType);

					// And unroll the existing types for args
					iteri(prevTypes, \i, mpt -> {
						mpt ?? {
							acc.env := setTree(^(acc.env), fargnames[i], mpt)
						} : {
							acc.env := removeFromTree(^(acc.env), fargnames[i]);
						}
					});

					// Restore the global environment without locals
					acc.env := safeEnv;
				}

				// Check the scope
				getChildType(5);
			} else if (name == "idtype") {
				// Used in functions. The type is the second child
				getChildType(1)

			} else if (name == "import_memory") {
				// min max module name scope
				getChildType(1);
				getChildType(4);

			} else if (name == "import_table") {
				// id reftype min max module name space				
				fname = getDslString(args[0]);
				tabletype = getChildType(1);

				getChildType(3);

				if (!deep && containsKeyTree(^(acc.env), fname)) {
					acc.onError(node, "table '" + fname + "' is duplicate");
				}

				// Record the table type
				acc.env := setTree(^(acc.env), fname, tabletype);
				getChildType(6);

			} else if (name == "import_fun") {
				// id type module name scope
				fname = getDslString(args[0]);
				fntype = getChildType(1);

				if (!deep && containsKeyTree(^(acc.env), fname)) {
					acc.onError(node, "import function '" + fname + "' is duplicate");
				}

				// OK, record the import type
				acc.env := setTree(^(acc.env), fname, fntype);
				getChildType(4);

			} else if (name == "import_global") {
				// id type mutable module name scope
				gname = getDslString(args[0]);
				type = getChildType(1);

				isMutable = getDslInt(args[2]);
				if (isMutable == 0) {
					// Record that this is NOT mutable
					acc.constants := insertSet(^(acc.constants), gname);
				}

				if (!deep && containsKeyTree(^(acc.env), gname)) {
					acc.onError(node, "import global '" + gname + "' is duplicate");
				}

				// OK, record the import type
				acc.env := setTree(^(acc.env), gname, type);

				getChildType(5);

			} else if (name == "memory") {
				// opt, min, max, scope
				getChildType(0);
				getChildType(1);
				getChildType(2);
				getChildType(3);
			} else if (name == "data") {
				getChildType(0);
				fname = getDslString(args[0]);
				acc.env := setTree(^(acc.env), fname, DslString("i32"));

				gname = getDslString(args[1]);
				if (gname != "") {
					getChildType(1);
					acc.env := setTree(^(acc.env), gname, DslString("i32"));
				}

				getChildType(2);
				getChildType(3);
				getChildType(4);

			} else if (name == "wase_empty") {
				DslList(makeList());

			// OK, expression typing

			} else if (name == "int") {
				DslString("i32");
			} else if (name == "double") {
				DslString("f64");
			} else if (name == "i64") {
				DslString("i64");
			} else if (name == "hex32") {
				DslString("i32");
			} else if (name == "hexf32") {
				DslString("f32");
			} else if (name == "hex64") {
				DslString("i64");
			} else if (name == "hexf64") {
				DslString("f64");

			} else if (name == "let") {
				// (id, ismut, type, exp, body)
				vname = getDslString(args[0]);
				isMutable = getDslInt(args[1]);
				type = getChildType(2);

				if (containsKeyTree(^(acc.env), vname)) {
					acc.onError(node, "let '" + vname + "' is shadowing");
				}

				if (isMutable == 0) {
					// Record that this is NOT mutable
					acc.constants := insertSet(^(acc.constants), vname);
				}
				acc.env := setTree(^(acc.env), vname, type);

				etype = getChildType(3);
				acc.unifyTypes(acc, type, etype);

				getChildType(4);
				
			} else if (name == "lettuple") {
				// (id, type, exp, body)
				vname = getDslString(args[0]);
				type = getChildType(2);

				if (containsKeyTree(^(acc.env), vname)) {
					acc.onError(node, "let '" + vname + "' is shadowing");
				}
				// Record that this is NOT mutable
				acc.constants := insertSet(^(acc.constants), vname);
				acc.env := setTree(^(acc.env), vname, type);
				iteriList(getDslList(type), \i, tp -> {
					vnamei = vname + "." + i2s(i);
					acc.constants := insertSet(^(acc.constants), vnamei);
					acc.env := setTree(^(acc.env), vnamei, tp);
				});

				etype = getChildType(3);
				acc.unifyTypes(acc, type, etype);

				getChildType(4);

			} else if (name == "var") {
				vname = getDslString(args[0]);
				mtype = lookupTree(^(acc.env), vname);
				mtype ?? {
					mtype
				} : {
					acc.onError(node, "Unknown var '" + vname + "' when type checking");
					makeDslTypeVar(acc);
				}

			} else if (name == "set") {
				vname = getDslString(args[0]);
				mtype = lookupTree(^(acc.env), vname);
				valtype = getChildType(1);
				mtype ?? {
					if (containsSet(^(acc.constants), vname)) {
						acc.onError(node, "global '" + vname + "' is not mutable");
					}

					acc.unifyTypes(acc, mtype, valtype);
					DslList(makeList());
				} : {
					acc.onError(node, "Unknown var '" + vname + "' to set when type checking");
					makeDslTypeVar(acc);
				}
			} else if (name == "tee") {
				vname = getDslString(args[0]);
				mtype = lookupTree(^(acc.env), vname);
				valtype = getChildType(1);
				mtype ?? {
					if (containsSet(^(acc.constants), vname)) {
						acc.onError(node, "global '" + vname + "' is not mutable");
					}
					acc.unifyTypes(acc, mtype, valtype);
					valtype;
				} : {
					acc.onError(node, "Unknown var '" + vname + "' to tee when type checking");
					makeDslTypeVar(acc);
				}

			} else if (name == "typeannotation") {
				etype = getChildType(0);
				type = getChildType(1);
				// If it is a list with a single element, it is a pure type
				rtype = if (countList(getDslList(type)) == 1) {
					list2array(getDslList(type))[0]
				} else type;
				acc.unifyTypes(acc, etype, rtype);
				etype;

			} else if (name == "wasm_op") {
				// id, parameters, args
				op = getDslString(args[0]);
				pars = unwrapDslPrimitiveList(args[1]);
				getChildType(1);
				opargs = getChildType(2);

				typecheckWaseInstruction(acc, op, list2array(pars), opargs, getChildType);

			} else if (name == "and" || name == "or" || name == "xor") {
				left = getChildType(0);
				right = getChildType(1);
				acc.unifyTypes(acc, left, right);
				left

			} else if (name == "negate") {
				getChildType(0);

			} else if (name == "add" || name == "sub" || name == "mul" 
					|| name == "div" || name == "mod") {
				left = getChildType(0);
				right = getChildType(1);
				acc.unifyTypes(acc, left, right);
				left;
			} else if (name == "equal" || name == "not_equal" || name == "less_equal" || name == "less"
				|| name == "greater_equal" || name == "greater") {
				left = getChildType(0);
				right = getChildType(1);
				acc.unifyTypes(acc, left, right);
				DslString("i32");
			} else if (name == "is_null") {
				val = getChildType(0);
			
				DslString("i32");

			} else if (name == "call") {
				fntype = getChildType(0);
				argtype = getChildType(1);
				
				retType = makeDslTypeVar(acc);
				callType = DslNode("func", [argtype, retType], 0);

				acc.unifyTypes(acc, fntype, callType);
				retType;
			} else if (name == "call2") {
				fntype = getChildType(0);
				argtype = getChildType(1);
				retType = makeDslTypeVar(acc);
				callType = DslNode("func", [argtype, retType], 0);
				acc.unifyTypes(acc, fntype, callType);
				retType;
			} else if (name == "return") {
				retType = getChildType(0);

				// We have to match the return type of the top block/function
				if (^(acc.blocks) == []) {
					println("Expected to know function type for return");
				} else {
					acc.unifyTypes(acc, ^(acc.blocks)[0], retType);
				}

				// The instruction itself does not have any type info
				makeDslTypeVar(acc);

			} else if (name == "brace") {
				ctype = getChildType(0);
				ltype = getDslList(ctype);
				// It is the final element that is the type
				foldList(ltype, DslList(makeList()), \__, t -> t);

			} else if (name == "block" || name == "loop") {
				blockType = makeDslTypeVar(acc);
				prePrefix = ^(acc.errorPrefix);
				preBlocks = ^(acc.blocks);
				acc.errorPrefix := prePrefix + " " + name;
				acc.blocks := arrayPush(preBlocks, blockType);

				ctype = getChildType(0);
				ltype = getDslList(ctype);
				// It is the final element that is the type
				lastType = foldList(ltype, DslList(makeList()), \__, t -> t);
				acc.unifyTypes(acc, blockType, lastType);

				acc.errorPrefix := prePrefix;
				acc.blocks := preBlocks;

				blockType;

			} else if (name == "ifelse") {
				cond = getChildType(0);
				acc.unifyTypes(acc, cond, DslString("i32"));

				blockType = makeDslTypeVar(acc);
				preBlocks = ^(acc.blocks);
				acc.blocks := arrayPush(preBlocks, blockType);

				thenType = getChildType(1);
				elseType = getChildType(2);
				acc.unifyTypes(acc, thenType, elseType);
				acc.unifyTypes(acc, blockType, thenType);

				acc.blocks := preBlocks;

				blockType;
			} else if (name == "if") {
				cond = getChildType(0);
				acc.unifyTypes(acc, cond, DslString("i32"));

				blockType = DslList(makeList());
				preBlocks = ^(acc.blocks);
				acc.blocks := arrayPush(preBlocks, blockType);

				thenType = getChildType(1);
				acc.unifyTypes(acc, thenType, blockType);
				acc.blocks := preBlocks;

				blockType;

			} else if (name == "tuple") {
				getChildType(0);
			} else if (name == "string") {
				DslString("string");
			} else if (name == "int") {
				DslString("i32");
			} else if (name == "double") {
				DslString("f64");
			} else if (name == "just_return") {
				retType = getChildType(0);

				// We have to match the return type of the top block/function
				if (^(acc.blocks) == []) {
					println("Expected to know function type for return");
				} else {
					acc.unifyTypes(acc, ^(acc.blocks)[0], retType);
				}

				// The instruction itself does not have any type info
				makeDslTypeVar(acc);

			} else {
				acc.onError(node, "TODO: Type check " + summarizeDsl(node));
				// This signifies a tyvar
				makeDslTypeVar(acc);
			}
		}
	}
}

typecheckWaseInstruction(acc : DslTypeAcc, op : string, pars : [DslAst], opargs : DslAst, getChildType : (int) -> DslAst) -> DslAst {
	i32 = DslString("i32");
	i64 = DslString("i64");
	infer = \ -> makeDslTypeVar(acc);
	list0 = DslList(makeList());
	list1 = \t1 -> DslList(makeList1(t1));
	list2 = \t1, t2 -> DslList(Cons(t1, makeList1(t2)));
	list3 = \t1, t2, t3 -> DslList(Cons(t1, Cons(t2, makeList1(t3))));

	if (op == "store" || op == "store8" || op == "store16" || op == "store32") {
		acc.unifyTypes(acc, opargs, list2(i32, infer()));
		list0;
	} else if (op == "load" || op == "load8_s" || op == "load8_u"
			|| op == "load16_s" || op == "load16_u"
			|| op == "load32_s" || op == "load32_u"
		) {
		acc.unifyTypes(acc, opargs, list1(i32));
		// We will have to infer the return type
		infer();

	} else if (op == "unreachable" || op == "nop") {
		acc.unifyTypes(acc, opargs, list0);
		list0;
	} else if (op == "hole") {
		// This can be anything
		makeDslTypeVar(acc);
	} else if (op == "break" || op == "br") {
		aarg = list2array(getDslList(opargs));
		levels = if (pars == []) 0 else getDslInt(pars[0]);

		blocks = ^(acc.blocks);
		if (levels < length(blocks)) {
			blockType = ^(acc.blocks)[length(blocks) - (levels + 1)];
			if (aarg == []) {
				// No return value
				acc.unifyTypes(acc, opargs, list0);
				acc.unifyTypes(acc, blockType, list0);
			} else {
				// Some return value
				acc.unifyTypes(acc, opargs, list1(blockType));
			}
		} else {
			println("Expected to know block type");
		}

		// The instruction itself does not have any type info
		makeDslTypeVar(acc);
	} else if (op == "break_if" || op == "br_if") {
		aarg = list2array(getDslList(opargs));
		levels = if (pars == []) 0 else getDslInt(pars[0]);

		blocks = ^(acc.blocks);
		// println("Break_if " + i2s(levels) + " at " + i2s(length(blocks)));
		if (levels < length(blocks)) {
			blockType = ^(acc.blocks)[length(blocks) - (levels + 1)];
			if (length(aarg) == 1) {
				// No return value, but a condition
				acc.unifyTypes(acc, opargs, list1(i32));
				acc.unifyTypes(acc, blockType, list0);
			} else {
				// Some return value
				acc.unifyTypes(acc, opargs, list2(blockType, i32));
			}
		} else {
			println("Expected to know block type");
		}

		// The instruction itself does not have any type info
		makeDslTypeVar(acc);

	} else if (op == "br_table") {
		aarg = list2array(getDslList(opargs));
		levels = map(pars, getDslInt);

		blocks = ^(acc.blocks);
		// println("Break_if " + i2s(levels) + " at " + i2s(length(blocks)));
		if (levels != [] && forall(levels, \level -> level < length(blocks))) {
			if (length(aarg) == 1) {
				// No return value, but a condition
				acc.unifyTypes(acc, opargs, list1(i32));
				// Make sure all types of those blocks are checked
				iter(levels, \level -> {
					btype = ^(acc.blocks)[length(blocks) - (level + 1)];
					acc.unifyTypes(acc, btype, list0);
				})
			} else {
				// Some return value
				defLevel = lastElement(levels, 0);
				defType = ^(acc.blocks)[length(blocks) - (defLevel + 1)];

				// Make sure all types of those blocks are checked
				iter(levels, \level -> {
					btype = ^(acc.blocks)[length(blocks) - (level + 1)];
					acc.unifyTypes(acc, btype, defType);
				});
				acc.unifyTypes(acc, opargs, list2(defType, i32));
			}
		} else {
			println("br_table out of blocks");
		}

		// The instruction itself does not have any type info
		makeDslTypeVar(acc);

	} else if (op == "clz" || op == "ctz" || op == "popcnt") {
		val = infer();
		acc.unifyTypes(acc, opargs, list1(val));
		val;
	} else if (op == "div_u" || op == "rem_u" || op == "shl" || op == "shr_s" || op == "shr_u" || op == "rotl" || op == "rotr"
			|| op == "min" || op == "max" || op == "copysign") {
		val = infer();
		acc.unifyTypes(acc, opargs, list2(val, infer()));
		val;
	} else if (op == "eqz") {
		val = infer();
		acc.unifyTypes(acc, opargs, list1(val));
		i32;
	} else if (op == "abs" || op == "ceil" || op == "floor" || op == "trunc" || op == "nearest" || op == "sqrt") {
		val = infer();
		acc.unifyTypes(acc, opargs, list1(val));
		val;
	} else if (op == "lt_u" || op == "gt_u" || op == "le_u" || op == "ge_u") {
		acc.unifyTypes(acc, opargs, list2(infer(), infer()));
		i32;
	} else if (op == "wrap") {
		acc.unifyTypes(acc, opargs, list1(i64));
		i32;
	} else if (op == "trunc_s" || op == "trunc_u" || op == "trunc_sat_s" || op == "trunc_sat_u") {
		acc.unifyTypes(acc, opargs, list1(infer()));
		infer();
	} else if (op == "extend_s" || op == "extend_u") {
		acc.unifyTypes(acc, opargs, list1(i32));
		i64;
	} else if (op == "extend8_s" || op == "extend16_s") {
		val = infer();
		acc.unifyTypes(acc, opargs, list1(val));
		val;
	} else if (op == "convert_s" || op == "convert_u" || op == "reinterpret") {
		acc.unifyTypes(acc, opargs, list1(infer()));
		infer();
	} else if (op == "promote") {
		acc.unifyTypes(acc, opargs, list1(DslString("f32")));
		DslString("f64");
	} else if (op == "demote") {
		acc.unifyTypes(acc, opargs, list1(DslString("f64")));
		DslString("f32");
	} else if (op == "drop") {
		acc.unifyTypes(acc, opargs, list0);
		list0;
	} else if (op == "select") {
		resType = infer();
		acc.unifyTypes(acc, opargs, list3(i32, resType, resType));
		resType;
	} else if (op == "ref.null") {
		acc.unifyTypes(acc, opargs, list0);
		if (length(pars) != 1) {
			println("ref.null requires a parameter");
			DslString("func");
		} else {
			tnode = getDslNode(pars[0]);
			type = tnode.args[0];
			type
		}
	} else if (op == "ref.func") {
		acc.unifyTypes(acc, opargs, list0);
		DslString("func");

	} else if (op == "memory.size") {
		acc.unifyTypes(acc, opargs, list0);
		i32;
	} else if (op == "memory.grow") {
		acc.unifyTypes(acc, opargs, list1(i32));
		i32;
	} else if (op == "memory.fill" || op == "memory.copy") {
		acc.unifyTypes(acc, opargs, list3(i32, i32, i32));
		list0;

	} else if (op == "table.get") {
		acc.unifyTypes(acc, opargs, list1(i32));

		if (length(pars) != 1) {
			println("table.get requires a table id parameter");
			DslString("func");
		} else {
			tableid = getDslString(pars[0]);
			mtype = lookupTree(^(acc.env), tableid);
			mtype ?? {
				mtype
			} : {
				println("Unknown table.get table id '" + tableid + "'");
				DslString("func");
			}
		};
	} else if (op == "table.grow") {
		val = infer();
		acc.unifyTypes(acc, opargs, list2(val, i32));
		if (length(pars) != 1) {
			println("table.grow requires a table id parameter");
		}
		i32;
	} else if (op == "table.size") {
		acc.unifyTypes(acc, opargs, list0);
		if (length(pars) != 1) {
			println("table.size requires a table id parameter");
		}
		i32;
	} else if (op == "table.set") {
		val = infer();
		acc.unifyTypes(acc, opargs, list2(i32, val));
		if (length(pars) != 1) {
			println("table.set requires a table id parameter");
		}
		list0;
	} else if (op == "table.copy") {
		acc.unifyTypes(acc, opargs, list3(i32, i32, i32));
		if (length(pars) != 2) {
			println("table.copy requires 2 table id parameters");
		}
		list0;
	} else if (op == "table.fill") {
		val = infer();
		acc.unifyTypes(acc, opargs, list3(i32, val, i32));
		if (length(pars) != 1) {
			println("table.fill requires a table id parameter");
		}
		list0;

	} else if (op == "call_indirect") {
		nargs = countList(getDslList(opargs));
		// All args are inferred, except the last, which has to be an int
		argTypes = DslList(mapiList(getDslList(opargs), \i, __ -> {
			if (i == nargs - 1) i32 else infer();
		}));
		acc.unifyTypes(acc, opargs, argTypes);
		infer();
	} else if (op == "fn") {
		if (length(pars) != 1) {
			println("fn requires a function id parameter");
		}
		acc.unifyTypes(acc, opargs, list0);
		i32;
	} else {
		typecheckWaseVectorInstruction(acc, op, pars, opargs, getChildType);
	}
}

typecheckWaseVectorInstruction(acc : DslTypeAcc, op : string, pars : [DslAst], opargs : DslAst, getChildType : (int) -> DslAst) -> DslAst {
	i32 = DslString("i32");
	i64 = DslString("i64");
	f32 = DslString("f32");
	f64 = DslString("f64");
	v128 = DslString("v128");
	list0 = DslList(makeList());
	list1 = \t1 -> DslList(makeList1(t1));
	list2 = \t1, t2 -> DslList(Cons(t1, makeList1(t2)));
	list3 = \t1, t2, t3 -> DslList(Cons(t1, Cons(t2, makeList1(t3))));

	parts = strSplit(op, ".");
	if (length(parts) != 2) {
		println("TODO: What is the type of  '" + op  + "' " + toString(pars) + " : " + summarizeDsl(opargs));
		DslList(makeList());
	} else {
		shape = parts[0];
		v128op = parts[1];

		unpacked = \t ->
			if (t == "i8x16") i32 else 
			if (t == "i16x8") i32 else
			if (t == "i32x4") i32 else
			if (t == "i64x2") i64 else
			if (t == "f32x4") f32 else
			if (t == "f64x2") f64 else list0;

		if (v128op == "const") {
			acc.unifyTypes(acc, opargs, list0);
			v128;
		} else if (startsWith(v128op, "load")) {
			if (!strContains(v128op, "lane")) {
				acc.unifyTypes(acc, opargs, list1(i32));
				v128;
			} else {
				acc.unifyTypes(acc, opargs, list2(i32, v128));
				v128;
			}
		} else if (startsWith(v128op,  "store")) {
			if (!strContains(v128op, "lane")) {
				acc.unifyTypes(acc, opargs, list2(i32, v128));
				list0;
			} else {
				acc.unifyTypes(acc, opargs, list2(i32, v128));
				list0;
			}
		} else if (containsSet(v128_unary_ops, v128op)) {
			acc.unifyTypes(acc, opargs, list1(v128));
			v128;
		} else if (containsSet(v128_binary_ops, v128op)) {
			acc.unifyTypes(acc, opargs, list2(v128, v128));
			v128;
		} else if (containsSet(v128_binary_rels, v128op)) {
			acc.unifyTypes(acc, opargs, list2(v128, v128));
			v128;
		} else if (startsWith(v128op, "min_") || startsWith(v128op, "max_") || 
			startsWith(v128op, "add_sub_") || startsWith(v128op, "sub_sat_")) {
			acc.unifyTypes(acc, opargs, list2(v128, v128));
			v128;
		} else if (v128op == "bitselect") {
			acc.unifyTypes(acc, opargs, list3(v128, v128, v128));
			v128;
		} else if (v128op == "any_true" || v128op == "bitmask") {
			acc.unifyTypes(acc, opargs, list1(v128));
			i32;
		} else if (v128op == "shl" || v128op == "shr_u" || v128op == "shr_s") {
			acc.unifyTypes(acc, opargs, list2(v128, i32));
			v128;
		} else if (startsWith(v128op, "extend") || startsWith(v128op, "trunc_sat") || startsWith(v128op, "convert") || startsWith(v128op, "demote") || startsWith(v128op, "promote")) {
			acc.unifyTypes(acc, opargs, list1(v128));
			v128;
		} else if (v128op == "splat") {
			acc.unifyTypes(acc, opargs, list1(unpacked(shape)));
			v128;
		} else if (startsWith(v128op, "extract_lane")) {
			acc.unifyTypes(acc, opargs, list1(v128));
			unpacked(shape);
		} else if (startsWith(v128op, "replace_lane")) {
			acc.unifyTypes(acc, opargs, list2(v128, unpacked(shape)));
			v128;
		} else if (startsWith(v128op, "narrow_")) {
			acc.unifyTypes(acc, opargs, list2(v128, v128));
			v128;
		} else if (startsWith(v128op, "dot_")) {
			acc.unifyTypes(acc, opargs, list2(v128, v128));
			v128;
		} else if (startsWith(v128op, "extmul_")) {
			acc.unifyTypes(acc, opargs, list2(v128, v128));
			v128;
		} else if (startsWith(v128op, "extadd_pairwise_")) {
			acc.unifyTypes(acc, opargs, list1(v128));
			v128;
		} else {
			println("TODO: What is the type of  '" + op  + "' " + toString(pars) + " : " + summarizeDsl(opargs));
			DslList(makeList());
		}
	}
}

v128_unary_ops = buildSet([
	"not", "abs", "neg", "sqrt", "ceil", "floor", "truct", "nearest", "popcnt"
]);

v128_binary_ops = buildSet([
	"and", "andnot", "or", "xor", "swizzle", "shuffle", 
	"add", "sub", "mul", "min", "max", "div", "pmin", "pmax", "avgr_u", "q15mulr_sat_s"
]);

v128_binary_rels = buildSet([
	"eq", "ne", "lt", "gt", "le", "ge",
	"eq_u", "ne_u", "lt_u", "gt_u", "le_u", "ge_u",
	"eq_s", "ne_s", "lt_s", "gt_s", "le_s", "ge_s",
]);

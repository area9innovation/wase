// Generated by Gringo
import wase/wase_types;
import runtime;
import tools/dsl/dsl_util;

export {
	waseAst2DslAst(w : WaseAst) -> DslAst;
	dslAst2WaseAst(d : DslAst) -> WaseAst;
	dslAst2WeAtom(d : DslAst) -> WeAtom;
	dslAst2WeDataoffset(d : DslAst) -> WeDataoffset;
	dslAst2WeDatavalue(d : DslAst) -> WeDatavalue;
	dslAst2WeDecl(d : DslAst) -> WeDecl;
	dslAst2WeExp(d : DslAst) -> WeExp;
	dslAst2WeImport(d : DslAst) -> WeImport;
	dslAst2WeInstruction(d : DslAst) -> WeInstruction;
	dslAst2WeWarg(d : DslAst) -> WeWarg;
}

waseAst2DslAst(wal : WaseAst) -> DslAst {
	switch (wal) {
		WaseAstBool(value): DslBool(value);
		WaseAstInt(value): DslInt(value);
		WaseAstDouble(value): DslDouble(value);
		WaseAstString(value): DslString(value);
		WaseAstList(value): DslList(mapList(value, waseAst2DslAst));
		WeAdd(a0, a1): DslNode("add", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeAnd(a0, a1): DslNode("and", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeBlock(a0): DslNode("block", [DslList(fold(a0, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc)))], 0);
		WeBrace(a0): DslNode("brace", [DslList(fold(a0, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc)))], 0);
		WeCall(a0, a1): DslNode("call", [waseAst2DslAst(a0), DslList(fold(a1, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc)))], 0);
		WeData(a0, a1, a2, a3, a4): DslNode("data", [DslString(a0), DslString(a1), DslList(fold(a2, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc))), waseAst2DslAst(a3), waseAst2DslAst(a4)], 0);
		WeDiv(a0, a1): DslNode("div", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeDouble(a0): DslNode("double", [DslDouble(a0)], 0);
		WeEqual(a0, a1): DslNode("equal", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeFnType(a0, a1): DslNode("fn_type", [DslList(fold(a0, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc))), DslList(fold(a1, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc)))], 0);
		WeFunction(a0, a1, a2, a3, a4, a5): DslNode("function", [DslString(a0), DslInt(a1), DslList(fold(a2, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc))), DslList(fold(a3, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc))), waseAst2DslAst(a4), waseAst2DslAst(a5)], 0);
		WeGlobal(a0, a1, a2, a3, a4, a5): DslNode("global", [DslString(a0), DslInt(a1), waseAst2DslAst(a2), DslInt(a3), waseAst2DslAst(a4), waseAst2DslAst(a5)], 0);
		WeGreater(a0, a1): DslNode("greater", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeGreaterEqual(a0, a1): DslNode("greater_equal", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeHex32(a0): DslNode("hex32", [DslString(a0)], 0);
		WeHex64(a0): DslNode("hex64", [DslString(a0)], 0);
		WeHexf32(a0): DslNode("hexf32", [DslString(a0)], 0);
		WeHexf64(a0): DslNode("hexf64", [DslString(a0)], 0);
		WeI64(a0): DslNode("i64", [DslString(a0)], 0);
		WeIdtype(a0, a1): DslNode("idtype", [DslString(a0), waseAst2DslAst(a1)], 0);
		WeIf(a0, a1): DslNode("if", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeIfelse(a0, a1, a2): DslNode("ifelse", [waseAst2DslAst(a0), waseAst2DslAst(a1), waseAst2DslAst(a2)], 0);
		WeImportFun(a0, a1, a2, a3, a4): DslNode("import_fun", [DslString(a0), waseAst2DslAst(a1), DslString(a2), DslString(a3), waseAst2DslAst(a4)], 0);
		WeImportGlobal(a0, a1, a2, a3, a4, a5): DslNode("import_global", [DslString(a0), waseAst2DslAst(a1), DslInt(a2), DslString(a3), DslString(a4), waseAst2DslAst(a5)], 0);
		WeImportMemory(a0, a1, a2, a3, a4): DslNode("import_memory", [DslInt(a0), DslInt(a1), DslString(a2), DslString(a3), waseAst2DslAst(a4)], 0);
		WeImportTable(a0, a1, a2, a3, a4, a5, a6): DslNode("import_table", [DslString(a0), waseAst2DslAst(a1), DslInt(a2), DslInt(a3), DslString(a4), DslString(a5), waseAst2DslAst(a6)], 0);
		WeInt(a0): DslNode("int", [DslInt(a0)], 0);
		WeIsNull(a0): DslNode("is_null", [waseAst2DslAst(a0)], 0);
		WeLess(a0, a1): DslNode("less", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeLessEqual(a0, a1): DslNode("less_equal", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeLet(a0, a1, a2, a3, a4): DslNode("let", [DslString(a0), DslInt(a1), waseAst2DslAst(a2), waseAst2DslAst(a3), DslList(fold(a4, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc)))], 0);
		WeLettuple(a0, a1, a2, a3, a4): DslNode("lettuple", [DslString(a0), DslInt(a1), DslList(fold(a2, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc))), waseAst2DslAst(a3), DslList(fold(a4, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc)))], 0);
		WeLoop(a0): DslNode("loop", [DslList(fold(a0, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc)))], 0);
		WeMemory(a0, a1, a2, a3): DslNode("memory", [DslInt(a0), DslInt(a1), DslInt(a2), waseAst2DslAst(a3)], 0);
		WeMod(a0, a1): DslNode("mod", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeMul(a0, a1): DslNode("mul", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeNegate(a0): DslNode("negate", [waseAst2DslAst(a0)], 0);
		WeNotEqual(a0, a1): DslNode("not_equal", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeOr(a0, a1): DslNode("or", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeReturn(a0): DslNode("return", [waseAst2DslAst(a0)], 0);
		WeSet(a0, a1): DslNode("set", [DslString(a0), waseAst2DslAst(a1)], 0);
		WeString(a0): DslNode("string", [DslString(a0)], 0);
		WeSub(a0, a1): DslNode("sub", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeTee(a0, a1): DslNode("tee", [DslString(a0), waseAst2DslAst(a1)], 0);
		WeTuple(a0): DslNode("tuple", [DslList(fold(a0, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc)))], 0);
		WeType(a0): DslNode("type", [DslString(a0)], 0);
		WeTypeAnnotation(a0, a1): DslNode("type_annotation", [waseAst2DslAst(a0), DslList(fold(a1, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc)))], 0);
		WeVar(a0): DslNode("var", [DslString(a0)], 0);
		WeWaseEmpty(): DslNode("wase_empty", [], 0);
		WeWaseInclude(a0, a1): DslNode("wase_include", [DslString(a0), waseAst2DslAst(a1)], 0);
		WeWasmOp(a0, a1, a2): DslNode("wasm_op", [DslString(a0), DslList(fold(a1, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc))), DslList(fold(a2, makeList(), \acc, e -> Cons(waseAst2DslAst(e), acc)))], 0);
		WeXor(a0, a1): DslNode("xor", [waseAst2DslAst(a0), waseAst2DslAst(a1)], 0);
		WeZreturn(): DslNode("zreturn", [], 0);

	}
}

dslAst2WaseAst(d : DslAst) -> WaseAst {
	switch (d) {
		DslBool(value): WaseAstBool(value);
		DslInt(value): WaseAstInt(value);
		DslDouble(value): WaseAstDouble(value);
		DslString(value): WaseAstString(value);
		DslList(value): WaseAstList(mapList(value, dslAst2WaseAst));
		DslNode(name, args, pos): {
			if (name == "add") {
				WeAdd(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "and") {
				WeAnd(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "block") {
				WeBlock((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
			} else if (name == "brace") {
				WeBrace((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
			} else if (name == "call") {
				WeCall(dslAst2WeExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[1]))
			} else if (name == "data") {
				WeData(getDslString(args[0]), getDslString(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeDatavalue))(args[2]), dslAst2WeDataoffset(args[3]), dslAst2WeDecl(args[4]))
			} else if (name == "div") {
				WeDiv(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "double") {
				WeDouble(getDslDouble(args[0]))
			} else if (name == "equal") {
				WeEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "fn_type") {
				WeFnType((\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[1]))
			} else if (name == "function") {
				WeFunction(getDslString(args[0]), getDslInt(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeIdtype))(args[2]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[3]), dslAst2WeExp(args[4]), dslAst2WeDecl(args[5]))
			} else if (name == "global") {
				WeGlobal(getDslString(args[0]), getDslInt(args[1]), dslAst2WeType(args[2]), getDslInt(args[3]), dslAst2WeExp(args[4]), dslAst2WeDecl(args[5]))
			} else if (name == "greater") {
				WeGreater(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "greater_equal") {
				WeGreaterEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "hex32") {
				WeHex32(getDslString(args[0]))
			} else if (name == "hex64") {
				WeHex64(getDslString(args[0]))
			} else if (name == "hexf32") {
				WeHexf32(getDslString(args[0]))
			} else if (name == "hexf64") {
				WeHexf64(getDslString(args[0]))
			} else if (name == "i64") {
				WeI64(getDslString(args[0]))
			} else if (name == "idtype") {
				WeIdtype(getDslString(args[0]), dslAst2WeType(args[1]))
			} else if (name == "if") {
				WeIf(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "ifelse") {
				WeIfelse(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]), dslAst2WeExp(args[2]))
			} else if (name == "import_fun") {
				WeImportFun(getDslString(args[0]), dslAst2WeFnType(args[1]), getDslString(args[2]), getDslString(args[3]), dslAst2WeDecl(args[4]))
			} else if (name == "import_global") {
				WeImportGlobal(getDslString(args[0]), dslAst2WeType(args[1]), getDslInt(args[2]), getDslString(args[3]), getDslString(args[4]), dslAst2WeDecl(args[5]))
			} else if (name == "import_memory") {
				WeImportMemory(getDslInt(args[0]), getDslInt(args[1]), getDslString(args[2]), getDslString(args[3]), dslAst2WeDecl(args[4]))
			} else if (name == "import_table") {
				WeImportTable(getDslString(args[0]), dslAst2WeType(args[1]), getDslInt(args[2]), getDslInt(args[3]), getDslString(args[4]), getDslString(args[5]), dslAst2WeDecl(args[6]))
			} else if (name == "int") {
				WeInt(getDslInt(args[0]))
			} else if (name == "is_null") {
				WeIsNull(dslAst2WeExp(args[0]))
			} else if (name == "less") {
				WeLess(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "less_equal") {
				WeLessEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "let") {
				WeLet(getDslString(args[0]), getDslInt(args[1]), dslAst2WeType(args[2]), dslAst2WeExp(args[3]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[4]))
			} else if (name == "lettuple") {
				WeLettuple(getDslString(args[0]), getDslInt(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[2]), dslAst2WeExp(args[3]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[4]))
			} else if (name == "loop") {
				WeLoop((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
			} else if (name == "memory") {
				WeMemory(getDslInt(args[0]), getDslInt(args[1]), getDslInt(args[2]), dslAst2WeDecl(args[3]))
			} else if (name == "mod") {
				WeMod(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "mul") {
				WeMul(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "negate") {
				WeNegate(dslAst2WeExp(args[0]))
			} else if (name == "not_equal") {
				WeNotEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "or") {
				WeOr(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "return") {
				WeReturn(dslAst2WeExp(args[0]))
			} else if (name == "set") {
				WeSet(getDslString(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "string") {
				WeString(getDslString(args[0]))
			} else if (name == "sub") {
				WeSub(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "tee") {
				WeTee(getDslString(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "tuple") {
				WeTuple((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
			} else if (name == "type") {
				WeType(getDslString(args[0]))
			} else if (name == "type_annotation") {
				WeTypeAnnotation(dslAst2WeExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[1]))
			} else if (name == "var") {
				WeVar(getDslString(args[0]))
			} else if (name == "wase_empty") {
				WeWaseEmpty()
			} else if (name == "wase_include") {
				WeWaseInclude(getDslString(args[0]), dslAst2WeDecl(args[1]))
			} else if (name == "wasm_op") {
				WeWasmOp(getDslString(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeWarg))(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[2]))
			} else if (name == "xor") {
				WeXor(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
			} else if (name == "zreturn") {
				WeZreturn()
			} else { println("ERROR: Could not convert " + name + " in WaseAst"); WaseAstBool(false) }

		}
	}
}

dslAst2WeAtom(d : DslAst) -> WeAtom {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "block") {
		WeBlock((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "double") {
		WeDouble(getDslDouble(args[0]))
	} else if (name == "hex32") {
		WeHex32(getDslString(args[0]))
	} else if (name == "hex64") {
		WeHex64(getDslString(args[0]))
	} else if (name == "hexf32") {
		WeHexf32(getDslString(args[0]))
	} else if (name == "hexf64") {
		WeHexf64(getDslString(args[0]))
	} else if (name == "i64") {
		WeI64(getDslString(args[0]))
	} else if (name == "if") {
		WeIf(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "ifelse") {
		WeIfelse(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]), dslAst2WeExp(args[2]))
	} else if (name == "int") {
		WeInt(getDslInt(args[0]))
	} else if (name == "loop") {
		WeLoop((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "return") {
		WeReturn(dslAst2WeExp(args[0]))
	} else if (name == "set") {
		WeSet(getDslString(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "tee") {
		WeTee(getDslString(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "tuple") {
		WeTuple((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "var") {
		WeVar(getDslString(args[0]))
	} else if (name == "zreturn") {
		WeZreturn()
	} else { println("ERROR: Could not convert " + name + " in WeAtom"); WeDouble(0.0) }

}
dslAst2WeDataoffset(d : DslAst) -> WeDataoffset {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "add") {
		WeAdd(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "and") {
		WeAnd(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "block") {
		WeBlock((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "brace") {
		WeBrace((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "call") {
		WeCall(dslAst2WeExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[1]))
	} else if (name == "div") {
		WeDiv(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "double") {
		WeDouble(getDslDouble(args[0]))
	} else if (name == "equal") {
		WeEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "greater") {
		WeGreater(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "greater_equal") {
		WeGreaterEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "hex32") {
		WeHex32(getDslString(args[0]))
	} else if (name == "hex64") {
		WeHex64(getDslString(args[0]))
	} else if (name == "hexf32") {
		WeHexf32(getDslString(args[0]))
	} else if (name == "hexf64") {
		WeHexf64(getDslString(args[0]))
	} else if (name == "i64") {
		WeI64(getDslString(args[0]))
	} else if (name == "if") {
		WeIf(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "ifelse") {
		WeIfelse(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]), dslAst2WeExp(args[2]))
	} else if (name == "int") {
		WeInt(getDslInt(args[0]))
	} else if (name == "is_null") {
		WeIsNull(dslAst2WeExp(args[0]))
	} else if (name == "less") {
		WeLess(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "less_equal") {
		WeLessEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "let") {
		WeLet(getDslString(args[0]), getDslInt(args[1]), dslAst2WeType(args[2]), dslAst2WeExp(args[3]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[4]))
	} else if (name == "lettuple") {
		WeLettuple(getDslString(args[0]), getDslInt(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[2]), dslAst2WeExp(args[3]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[4]))
	} else if (name == "loop") {
		WeLoop((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "mod") {
		WeMod(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "mul") {
		WeMul(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "negate") {
		WeNegate(dslAst2WeExp(args[0]))
	} else if (name == "not_equal") {
		WeNotEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "or") {
		WeOr(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "return") {
		WeReturn(dslAst2WeExp(args[0]))
	} else if (name == "set") {
		WeSet(getDslString(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "sub") {
		WeSub(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "tee") {
		WeTee(getDslString(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "tuple") {
		WeTuple((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "type_annotation") {
		WeTypeAnnotation(dslAst2WeExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[1]))
	} else if (name == "var") {
		WeVar(getDslString(args[0]))
	} else if (name == "wasm_op") {
		WeWasmOp(getDslString(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeWarg))(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[2]))
	} else if (name == "xor") {
		WeXor(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "zreturn") {
		WeZreturn()
	} else { println("ERROR: Could not convert " + name + " in WeDataoffset"); WeInt(0) }

}
dslAst2WeDatavalue(d : DslAst) -> WeDatavalue {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "double") {
		WeDouble(getDslDouble(args[0]))
	} else if (name == "int") {
		WeInt(getDslInt(args[0]))
	} else if (name == "string") {
		WeString(getDslString(args[0]))
	} else { println("ERROR: Could not convert " + name + " in WeDatavalue"); WeDouble(0.0) }

}
dslAst2WeDecl(d : DslAst) -> WeDecl {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "data") {
		WeData(getDslString(args[0]), getDslString(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeDatavalue))(args[2]), dslAst2WeDataoffset(args[3]), dslAst2WeDecl(args[4]))
	} else if (name == "function") {
		WeFunction(getDslString(args[0]), getDslInt(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeIdtype))(args[2]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[3]), dslAst2WeExp(args[4]), dslAst2WeDecl(args[5]))
	} else if (name == "global") {
		WeGlobal(getDslString(args[0]), getDslInt(args[1]), dslAst2WeType(args[2]), getDslInt(args[3]), dslAst2WeExp(args[4]), dslAst2WeDecl(args[5]))
	} else if (name == "import_fun") {
		WeImportFun(getDslString(args[0]), dslAst2WeFnType(args[1]), getDslString(args[2]), getDslString(args[3]), dslAst2WeDecl(args[4]))
	} else if (name == "import_global") {
		WeImportGlobal(getDslString(args[0]), dslAst2WeType(args[1]), getDslInt(args[2]), getDslString(args[3]), getDslString(args[4]), dslAst2WeDecl(args[5]))
	} else if (name == "import_memory") {
		WeImportMemory(getDslInt(args[0]), getDslInt(args[1]), getDslString(args[2]), getDslString(args[3]), dslAst2WeDecl(args[4]))
	} else if (name == "import_table") {
		WeImportTable(getDslString(args[0]), dslAst2WeType(args[1]), getDslInt(args[2]), getDslInt(args[3]), getDslString(args[4]), getDslString(args[5]), dslAst2WeDecl(args[6]))
	} else if (name == "memory") {
		WeMemory(getDslInt(args[0]), getDslInt(args[1]), getDslInt(args[2]), dslAst2WeDecl(args[3]))
	} else if (name == "wase_empty") {
		WeWaseEmpty()
	} else if (name == "wase_include") {
		WeWaseInclude(getDslString(args[0]), dslAst2WeDecl(args[1]))
	} else { println("ERROR: Could not convert " + name + " in WeDecl"); WeData("", "", [], WeInt(0), WeWaseEmpty()) }

}
dslAst2WeExp(d : DslAst) -> WeExp {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "add") {
		WeAdd(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "and") {
		WeAnd(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "block") {
		WeBlock((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "brace") {
		WeBrace((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "call") {
		WeCall(dslAst2WeExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[1]))
	} else if (name == "div") {
		WeDiv(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "double") {
		WeDouble(getDslDouble(args[0]))
	} else if (name == "equal") {
		WeEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "greater") {
		WeGreater(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "greater_equal") {
		WeGreaterEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "hex32") {
		WeHex32(getDslString(args[0]))
	} else if (name == "hex64") {
		WeHex64(getDslString(args[0]))
	} else if (name == "hexf32") {
		WeHexf32(getDslString(args[0]))
	} else if (name == "hexf64") {
		WeHexf64(getDslString(args[0]))
	} else if (name == "i64") {
		WeI64(getDslString(args[0]))
	} else if (name == "if") {
		WeIf(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "ifelse") {
		WeIfelse(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]), dslAst2WeExp(args[2]))
	} else if (name == "int") {
		WeInt(getDslInt(args[0]))
	} else if (name == "is_null") {
		WeIsNull(dslAst2WeExp(args[0]))
	} else if (name == "less") {
		WeLess(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "less_equal") {
		WeLessEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "let") {
		WeLet(getDslString(args[0]), getDslInt(args[1]), dslAst2WeType(args[2]), dslAst2WeExp(args[3]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[4]))
	} else if (name == "lettuple") {
		WeLettuple(getDslString(args[0]), getDslInt(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[2]), dslAst2WeExp(args[3]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[4]))
	} else if (name == "loop") {
		WeLoop((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "mod") {
		WeMod(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "mul") {
		WeMul(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "negate") {
		WeNegate(dslAst2WeExp(args[0]))
	} else if (name == "not_equal") {
		WeNotEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "or") {
		WeOr(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "return") {
		WeReturn(dslAst2WeExp(args[0]))
	} else if (name == "set") {
		WeSet(getDslString(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "sub") {
		WeSub(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "tee") {
		WeTee(getDslString(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "tuple") {
		WeTuple((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "type_annotation") {
		WeTypeAnnotation(dslAst2WeExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[1]))
	} else if (name == "var") {
		WeVar(getDslString(args[0]))
	} else if (name == "wasm_op") {
		WeWasmOp(getDslString(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeWarg))(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[2]))
	} else if (name == "xor") {
		WeXor(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
	} else if (name == "zreturn") {
		WeZreturn()
	} else { println("ERROR: Could not convert " + name + " in WeExp"); WeAdd(WeDouble(0.0), WeDouble(0.0)) }

}
dslAst2WeImport(d : DslAst) -> WeImport {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "import_fun") {
		WeImportFun(getDslString(args[0]), dslAst2WeFnType(args[1]), getDslString(args[2]), getDslString(args[3]), dslAst2WeDecl(args[4]))
	} else if (name == "import_global") {
		WeImportGlobal(getDslString(args[0]), dslAst2WeType(args[1]), getDslInt(args[2]), getDslString(args[3]), getDslString(args[4]), dslAst2WeDecl(args[5]))
	} else if (name == "import_memory") {
		WeImportMemory(getDslInt(args[0]), getDslInt(args[1]), getDslString(args[2]), getDslString(args[3]), dslAst2WeDecl(args[4]))
	} else if (name == "import_table") {
		WeImportTable(getDslString(args[0]), dslAst2WeType(args[1]), getDslInt(args[2]), getDslInt(args[3]), getDslString(args[4]), getDslString(args[5]), dslAst2WeDecl(args[6]))
	} else { println("ERROR: Could not convert " + name + " in WeImport"); WeImportFun("", WeFnType([], []), "", "", WeWaseEmpty()) }

}
dslAst2WeInstruction(d : DslAst) -> WeInstruction {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "block") {
		WeBlock((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "loop") {
		WeLoop((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
	} else if (name == "return") {
		WeReturn(dslAst2WeExp(args[0]))
	} else if (name == "zreturn") {
		WeZreturn()
	} else { println("ERROR: Could not convert " + name + " in WeInstruction"); WeBlock([]) }

}
dslAst2WeWarg(d : DslAst) -> WeWarg {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "int") {
		WeInt(getDslInt(args[0]))
	} else if (name == "string") {
		WeString(getDslString(args[0]))
	} else if (name == "type") {
		WeType(getDslString(args[0]))
	} else { println("ERROR: Could not convert " + name + " in WeWarg"); WeInt(0) }

}
dslAst2WeAdd(d : DslAst) -> WeAdd {
	node = getDslNode(d);
	args = node.args;
	WeAdd(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeAnd(d : DslAst) -> WeAnd {
	node = getDslNode(d);
	args = node.args;
	WeAnd(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeBlock(d : DslAst) -> WeBlock {
	node = getDslNode(d);
	args = node.args;
	WeBlock((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
}
dslAst2WeBrace(d : DslAst) -> WeBrace {
	node = getDslNode(d);
	args = node.args;
	WeBrace((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
}
dslAst2WeCall(d : DslAst) -> WeCall {
	node = getDslNode(d);
	args = node.args;
	WeCall(dslAst2WeExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[1]))
}
dslAst2WeData(d : DslAst) -> WeData {
	node = getDslNode(d);
	args = node.args;
	WeData(getDslString(args[0]), getDslString(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeDatavalue))(args[2]), dslAst2WeDataoffset(args[3]), dslAst2WeDecl(args[4]))
}
dslAst2WeDiv(d : DslAst) -> WeDiv {
	node = getDslNode(d);
	args = node.args;
	WeDiv(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeDouble(d : DslAst) -> WeDouble {
	node = getDslNode(d);
	args = node.args;
	WeDouble(getDslDouble(args[0]))
}
dslAst2WeEqual(d : DslAst) -> WeEqual {
	node = getDslNode(d);
	args = node.args;
	WeEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeFnType(d : DslAst) -> WeFnType {
	node = getDslNode(d);
	args = node.args;
	WeFnType((\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[1]))
}
dslAst2WeFunction(d : DslAst) -> WeFunction {
	node = getDslNode(d);
	args = node.args;
	WeFunction(getDslString(args[0]), getDslInt(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeIdtype))(args[2]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[3]), dslAst2WeExp(args[4]), dslAst2WeDecl(args[5]))
}
dslAst2WeGlobal(d : DslAst) -> WeGlobal {
	node = getDslNode(d);
	args = node.args;
	WeGlobal(getDslString(args[0]), getDslInt(args[1]), dslAst2WeType(args[2]), getDslInt(args[3]), dslAst2WeExp(args[4]), dslAst2WeDecl(args[5]))
}
dslAst2WeGreater(d : DslAst) -> WeGreater {
	node = getDslNode(d);
	args = node.args;
	WeGreater(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeGreaterEqual(d : DslAst) -> WeGreaterEqual {
	node = getDslNode(d);
	args = node.args;
	WeGreaterEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeHex32(d : DslAst) -> WeHex32 {
	node = getDslNode(d);
	args = node.args;
	WeHex32(getDslString(args[0]))
}
dslAst2WeHex64(d : DslAst) -> WeHex64 {
	node = getDslNode(d);
	args = node.args;
	WeHex64(getDslString(args[0]))
}
dslAst2WeHexf32(d : DslAst) -> WeHexf32 {
	node = getDslNode(d);
	args = node.args;
	WeHexf32(getDslString(args[0]))
}
dslAst2WeHexf64(d : DslAst) -> WeHexf64 {
	node = getDslNode(d);
	args = node.args;
	WeHexf64(getDslString(args[0]))
}
dslAst2WeI64(d : DslAst) -> WeI64 {
	node = getDslNode(d);
	args = node.args;
	WeI64(getDslString(args[0]))
}
dslAst2WeIdtype(d : DslAst) -> WeIdtype {
	node = getDslNode(d);
	args = node.args;
	WeIdtype(getDslString(args[0]), dslAst2WeType(args[1]))
}
dslAst2WeIf(d : DslAst) -> WeIf {
	node = getDslNode(d);
	args = node.args;
	WeIf(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeIfelse(d : DslAst) -> WeIfelse {
	node = getDslNode(d);
	args = node.args;
	WeIfelse(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]), dslAst2WeExp(args[2]))
}
dslAst2WeImportFun(d : DslAst) -> WeImportFun {
	node = getDslNode(d);
	args = node.args;
	WeImportFun(getDslString(args[0]), dslAst2WeFnType(args[1]), getDslString(args[2]), getDslString(args[3]), dslAst2WeDecl(args[4]))
}
dslAst2WeImportGlobal(d : DslAst) -> WeImportGlobal {
	node = getDslNode(d);
	args = node.args;
	WeImportGlobal(getDslString(args[0]), dslAst2WeType(args[1]), getDslInt(args[2]), getDslString(args[3]), getDslString(args[4]), dslAst2WeDecl(args[5]))
}
dslAst2WeImportMemory(d : DslAst) -> WeImportMemory {
	node = getDslNode(d);
	args = node.args;
	WeImportMemory(getDslInt(args[0]), getDslInt(args[1]), getDslString(args[2]), getDslString(args[3]), dslAst2WeDecl(args[4]))
}
dslAst2WeImportTable(d : DslAst) -> WeImportTable {
	node = getDslNode(d);
	args = node.args;
	WeImportTable(getDslString(args[0]), dslAst2WeType(args[1]), getDslInt(args[2]), getDslInt(args[3]), getDslString(args[4]), getDslString(args[5]), dslAst2WeDecl(args[6]))
}
dslAst2WeInt(d : DslAst) -> WeInt {
	node = getDslNode(d);
	args = node.args;
	WeInt(getDslInt(args[0]))
}
dslAst2WeIsNull(d : DslAst) -> WeIsNull {
	node = getDslNode(d);
	args = node.args;
	WeIsNull(dslAst2WeExp(args[0]))
}
dslAst2WeLess(d : DslAst) -> WeLess {
	node = getDslNode(d);
	args = node.args;
	WeLess(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeLessEqual(d : DslAst) -> WeLessEqual {
	node = getDslNode(d);
	args = node.args;
	WeLessEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeLet(d : DslAst) -> WeLet {
	node = getDslNode(d);
	args = node.args;
	WeLet(getDslString(args[0]), getDslInt(args[1]), dslAst2WeType(args[2]), dslAst2WeExp(args[3]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[4]))
}
dslAst2WeLettuple(d : DslAst) -> WeLettuple {
	node = getDslNode(d);
	args = node.args;
	WeLettuple(getDslString(args[0]), getDslInt(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[2]), dslAst2WeExp(args[3]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[4]))
}
dslAst2WeLoop(d : DslAst) -> WeLoop {
	node = getDslNode(d);
	args = node.args;
	WeLoop((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
}
dslAst2WeMemory(d : DslAst) -> WeMemory {
	node = getDslNode(d);
	args = node.args;
	WeMemory(getDslInt(args[0]), getDslInt(args[1]), getDslInt(args[2]), dslAst2WeDecl(args[3]))
}
dslAst2WeMod(d : DslAst) -> WeMod {
	node = getDslNode(d);
	args = node.args;
	WeMod(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeMul(d : DslAst) -> WeMul {
	node = getDslNode(d);
	args = node.args;
	WeMul(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeNegate(d : DslAst) -> WeNegate {
	node = getDslNode(d);
	args = node.args;
	WeNegate(dslAst2WeExp(args[0]))
}
dslAst2WeNotEqual(d : DslAst) -> WeNotEqual {
	node = getDslNode(d);
	args = node.args;
	WeNotEqual(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeOr(d : DslAst) -> WeOr {
	node = getDslNode(d);
	args = node.args;
	WeOr(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeReturn(d : DslAst) -> WeReturn {
	node = getDslNode(d);
	args = node.args;
	WeReturn(dslAst2WeExp(args[0]))
}
dslAst2WeSet(d : DslAst) -> WeSet {
	node = getDslNode(d);
	args = node.args;
	WeSet(getDslString(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeString(d : DslAst) -> WeString {
	node = getDslNode(d);
	args = node.args;
	WeString(getDslString(args[0]))
}
dslAst2WeSub(d : DslAst) -> WeSub {
	node = getDslNode(d);
	args = node.args;
	WeSub(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeTee(d : DslAst) -> WeTee {
	node = getDslNode(d);
	args = node.args;
	WeTee(getDslString(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeTuple(d : DslAst) -> WeTuple {
	node = getDslNode(d);
	args = node.args;
	WeTuple((\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[0]))
}
dslAst2WeType(d : DslAst) -> WeType {
	node = getDslNode(d);
	args = node.args;
	WeType(getDslString(args[0]))
}
dslAst2WeTypeAnnotation(d : DslAst) -> WeTypeAnnotation {
	node = getDslNode(d);
	args = node.args;
	WeTypeAnnotation(dslAst2WeExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeType))(args[1]))
}
dslAst2WeVar(d : DslAst) -> WeVar {
	node = getDslNode(d);
	args = node.args;
	WeVar(getDslString(args[0]))
}
dslAst2WeWaseEmpty(d : DslAst) -> WeWaseEmpty {
	WeWaseEmpty()
}
dslAst2WeWaseInclude(d : DslAst) -> WeWaseInclude {
	node = getDslNode(d);
	args = node.args;
	WeWaseInclude(getDslString(args[0]), dslAst2WeDecl(args[1]))
}
dslAst2WeWasmOp(d : DslAst) -> WeWasmOp {
	node = getDslNode(d);
	args = node.args;
	WeWasmOp(getDslString(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2WeWarg))(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2WeExp))(args[2]))
}
dslAst2WeXor(d : DslAst) -> WeXor {
	node = getDslNode(d);
	args = node.args;
	WeXor(dslAst2WeExp(args[0]), dslAst2WeExp(args[1]))
}
dslAst2WeZreturn(d : DslAst) -> WeZreturn {
	WeZreturn()
}


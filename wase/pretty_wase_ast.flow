import wase/wase_types;
import text/blueprint;
import string_utils;

export {
	prettyWaseAst(w : WaseAst) -> string;
}

prettyWaseAst(w : WaseAst) -> string {
	pretty_bin = \a0, a1, op -> "(" + prettyWaseAst(a0) + " " + op + " " + prettyWaseAst(a1) + ")";
	switch (w) {
		WaseAstBool(value): b2s(value);
		WaseAstInt(value): i2s(value);
		WaseAstDouble(value): d2s(value);
		WaseAstString(value): value;
		WaseAstList(value):
			superglue(list2array(value), prettyWaseAst, "::");
		WeAdd(a0, a1): pretty_bin(a0, a1, "+");
		WeAnd(a0, a1): pretty_bin(a0, a1, "&&");
		WeBlock(as):
			"block {\n" + strIndent(superglue(as, prettyWaseAst, ";\n")) + "\n}";
		WeBrace(as): 
			if (length(as) == 0) "{ }" else
			"{\n" + strIndent(superglue(as, prettyWaseAst, ";\n")) + "\n}";
		WeCall(f, as): 
			prettyWaseAst(f) + "(" + superglue(as, prettyWaseAst, ", ") + ")";
		WeCall2(f, a): 
			prettyWaseAst(f) + "(<" + prettyWaseAst(a) + ">)";
		WeData(id, size, data, offset, next): {
			size_s = if (size == "") "" else " ," + size;
			offset_s = prettyWaseAst(offset);
			"data " + id + size_s + " = " +
			superglue(data, prettyWaseAst, ", ") + 
			(if (offset_s == "0") "" else " offset " + offset_s) + ";\n" + prettyWaseAst(next);
		}
		WeDiv(a0, a1): pretty_bin(a0, a1, "/");
		WeDouble(a0): d2s(a0);
		WeEqual(a0, a1): pretty_bin(a0, a1, "==");
		WeFnType(types, typelist):
			"(" + superglue(types, prettyWaseAst, ", ") + ") -> " + superglue(typelist, prettyWaseAst, ", ");
		WeFunction(id, _export, args, types, ex, next): {
			rettype_s = 
				if (length(types) == 1) prettyWaseAst(types[0]) 
				else "(" + superglue(types, prettyWaseAst, ", ") + ")";
			(if (_export == "0") "" else if (_export == "1") "export " else "export " + _export + " ") + id +
			"(" + superglue(args, prettyWaseAst, ", ") + ") -> " + rettype_s + "\n" + 
			prettyWaseAst(ex) + "\n" + prettyWaseAst(next);
		}
		WeGlobal(id, _export, type, _mutable, ex, next): {
			(if (_export == "0") "" else if (_export == "1") "export " else "export " + _export + " ") + id + 
			(if (_mutable == 1) "mutable " else "") + ": " + prettyWaseAst(type) + " = " + prettyWaseAst(ex) + "\n" + 
			prettyWaseAst(next);
		}
		WeGreater(a0, a1):
			pretty_bin(a0, a1, ">");
		WeGreaterEqual(a0, a1):
			pretty_bin(a0, a1, ">=");
		WeHex32(h):
			"0x" + h;
		WeHex64(h):
			"0xw" + h;
		WeHexf32(h):
			"0xn" + h;
		WeHexf64(h):
			"0xh" + h;
		WeI64(i):
			i + "w";
		WeIdtype(id, type):
			id + " : " + prettyWaseAst(type);
		WeIf(cond, ex):
			"if " + prettyWaseAst(cond) + prettyWaseAst(ex);
		WeIfelse(cond, pos, neg):
			"if " + prettyWaseAst(cond) + prettyWaseAst(pos) + " else " + prettyWaseAst(neg);
		WeImportFun(id1, fntype, id2, id3, next):
			"import " + id1 + " : " + prettyWaseAst(fntype) + " = " + id2 + "." + id3 + ";\n" + prettyWaseAst(next);

		WeImportGlobal(id1, type, mut, id2, id3, next):
			"import " + id1 + " : " + (if (mut == 1) "mutable " else "") +
			prettyWaseAst(type) + " = " + id2 + "." + id3 + ";\n" + prettyWaseAst(next);
		WeImportMemory(i0, i1, id1, id2, next):
			"import memory " + i2s(i0) + (if (i1 == 0) "" else i2s(i1) + " ") + " = " +
			id1 + "." + id2 + ";\n" + prettyWaseAst(next);
		WeImportTable(id1, reftype, i0, i1, id2, id3, next):
			"import " + id1 + " : table <" + prettyWaseAst(reftype) + ">(" + i2s(i0) + 
			(if (i1 == 0) "" else " " + i2s(i1)) + ">" +
			" = " + id2 + "." + id3 + ";\n" + prettyWaseAst(next);
		WeInt(i): i2s(i);
		WeIsNull(ex):
			prettyWaseAst(ex) + " is null";
		WeLess(a0, a1):
			pretty_bin(a0, a1, "<");
		WeLessEqual(a0, a1):
			pretty_bin(a0, a1, "<=");
		WeLet(id, i, type, ex, next): {
			type_s = prettyWaseAst(type);
			(if (i == 1) "var " else "") + id + (if (type_s == "auto") "" else " : " + type_s) + " = " + prettyWaseAst(ex) + ";\n" + 
			prettyWaseAst(next);
		}
		WeLettuple(id, i, type, ex, next):
			id + " : " + superglue(type, prettyWaseAst, ", ") + " = " + prettyWaseAst(ex) + ";\n" + 
			prettyWaseAst(next);
		WeLoop(es):
			"loop {\n" + strIndent(superglue(es, prettyWaseAst, ";\n")) + "\n}";
		WeMemory(_export, i0, i1, next): {
			(if (_export == "0") "" else if (_export == "1") "export " else "export " + _export + " ") + "memory " + i2s(i0) + 
			(if (i1 == 0) "" else " " + i2s(i1)) + ";\n" + prettyWaseAst(next);
		}
		WeMod(a0, a1):
			pretty_bin(a0, a1, "%");
		WeMul(a0, a1):
			pretty_bin(a0, a1, "*");
		WeNegate(a0):
			"-" + prettyWaseAst(a0);
		WeNotEqual(a0, a1):
			pretty_bin(a0, a1, "!=");
		WeOr(a0, a1):
			pretty_bin(a0, a1, "||");
		WeReturn(a0):
			"return " + prettyWaseAst(a0);
		WeSet(id, v):
			id + " := " + prettyWaseAst(v);
		WeString(s):
			"\"" + escapeStr(s) + "\"";
		WeSub(a0, a1):
			pretty_bin(a0, a1, "-");
		WeTee(id, v):
			id + " ::= " + prettyWaseAst(v);
		WeType(tp):
			tp;
		WeTypeAnnotation(ex, ts):
			prettyWaseAst(ex) + " : (" + superglue(ts, prettyWaseAst, ", ") + ")";
		WeVar(id1):
			id1;
		WeWaseEmpty():
			"end";
		WeWaseInclude(inc, next):
			"include " + inc + ";\n" + prettyWaseAst(next);
		WeWasmOp(op, was, as):
			op + "<" + superglue(was, prettyWaseAst, ", ") + ">(" + superglue(as, prettyWaseAst, ", ") + ")";
		WeXor(a0, a1):
			pretty_bin(a0, a1, "^");
		WeTuple(exps):
			"[" + superglue(exps, prettyWaseAst, ", ") + "]";
		WeJustReturn():
			"return";
	}
}

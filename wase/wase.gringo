wase = ws decl;

decl = memory | import | data | include | global | function | $"wase_empty_0";

global = optexport id $"swap"
		":" ws optmutable type $"swap"
		"=" ws exp ";" ws decl $"global_6"; // (id, export : bool, type, mutable : bool, exp, body, scope)

// function(id, export : bool, args : [idtype(id, type)], [returnTypes], body, scope)
function = optexport id $"swap" "(" ws lambdaargs ")" ws "->" ws type_list exp decl $"function_6"; // The "" makes right-recursion disappear
	lambdaargs = $"nil" id ":" ws type $"idtype_2" $"cons" ("," ws id ":" ws type $"idtype_2" $"cons")*
		| $"nil";

import =
	"import" ws "memory" ws int int_def "=" ws id "." id ";" ws decl $"import_memory_5"
	| "import" ws id ":" ws "table" ws "<" ws reftype ">" ws "(" ws int int_def ")" ws "=" ws id "." id ";" ws decl $"import_table_7"
	| "import" ws id ":" ws optmutable type $"swap" "=" ws id "." id ";" ws decl $"import_global_6" // id, type, mutable, module, name, scope
	| "import" ws id ":" ws fn_type "=" ws id "." id ";" ws decl $"import_fun_5"; // id type module name scope

memory = optexport "memory" ws int int_def ";" ws decl $"memory_4";

int_def = (int | $$"0" $"s2i");

// TODO: Define syntax for whether the memory is passive (i.e. not copied into memory automatically)
data = "data" ws
	id
	data_size
	"=" ws
	data_list
	data_offset
	";" ws decl $"data_5";

	data_list = $"nil" data_value $"cons" ("," ws data_value $"cons")*;
	data_value = (int $"int_1") | (string $"string_1") | (double $"double_1");
	data_size = ("," ws id | $$"");
	data_offset = ("offset" ws exp | $$"0" $"s2i" $"int_1");

include = "include" !letterOrDigit ws $(letterOrDigit+ ("/" letterOrDigit+)+) ws ";" ws decl $"wase_include_2";

exp =
	("var" !letterOrDigit ws $$"1" $"s2i" id $"swap" opttype "=" ws exp ";" ws expsemi $"brace_1" $"let_5"
		| id $$"0" $"s2i" opttype "=" ws exp ";" ws expsemi $"brace_1" $"let_5"
		| id $$"0" $"s2i" ":" ws type_list "=" ws exp ";" ws expsemi $"brace_1" $"lettuple_5"
	)
	|> exp "|" ws exp $"or_2"
	|> exp "&" ws exp $"and_2"
	|> exp "^" ws exp $"xor_2"
	|> exp "==" ws exp $"equal_2" | exp "!=" ws exp $"not_equal_2" | exp "is" ws "null" ws $"is_null_1"
	|> exp ("<=" ws exp $"less_equal_2" | "<" ws exp $"less_2" | ">=" ws exp $"greater_equal_2" | ">" ws exp $"greater_2")

	|> exp < ("+" ws exp $"add_2" | "-" ws exp $"sub_2")*
	|> exp ("*" ws exp $"mul_2" | "/" ws exp $"div_2" | "%"  ws exp $"mod_2")*


	|> exp ':' ws type_list $"typeannotation_2"

	|> wasmop

	|> (
		// '!' ws exp $"not_1"
		"-" ws exp $"negate_1" // Only for floats
		| exp (
			"(" ws exps ")" ws $"call_2"
		)*
	)


	|> brace $"brace_1"
	|> "(" ws exp ")" ws
	|> atom;

/* Give this a name, so it can be extended
//postfix = "(" ws exps ")" ws $"call_2";*/

opttype = ":" ws type | $$"auto" $"type_1";

brace = "{" ws expsemi "}" ws;

atom = "if" !letterOrDigit ws exp exp "else" ws exp $"ifelse_3"
		| "if" !letterOrDigit ws exp exp $"if_2"
		| "true" !letterOrDigit $$"1" $"s2i" $"int_1" ws
		| "false" !letterOrDigit $$"0" $"s2i" $"int_1" ws
		| instruction
		| id ":=" ws exp $"set_2"
		| id "::=" ws exp $"tee_2"
		| id $"var_1"
		| '[' ws exps ']' ws $"array_1" // list
//				| string $"string_1"
		| "0x" $(hexdigit+) ("w" $"hex64_1" | "n" $"hexf32_1" | "h" $"hexf64_1" | $"hex32_1") ws
		| $('0'-'9'+) "w" ws $"i64_1"
		| double $"double_1"
		| int $"int_1"
		// | '<<' $(!('>' '>') anychar)* ('>' '>') ws
		;

instruction =
	"block" !letterOrDigit ws brace $"block_1"
	| "loop" !letterOrDigit ws brace $"loop_1"
	| "return" !letterOrDigit ws exp $"return_1"
	| "return" $"zreturn_0"
	;

wasmop = $wasmid ws "<" ws wargs ">" ws "(" ws exps ")" ws $"wasm_op_3";
	wargs = $"nil" warg $"cons"("," ws warg $"cons")* | $"nil";
	warg = type | id $"string_1" | int $"int_1";

	wasmid = 'a'-'z' wasmidpart* ("." wasmidpart+)?;
	wasmidpart = 'a'-'z' | '0'-'9' | "_";

exps = $"nil" exp $"cons" ("," ws exp $"cons")* ("," ws)? | $"nil";

expsemi = $"nil" exp $"cons" (#";" ws exp $"cons")* (";" ws)? | $"nil";

optexport = "export" ws (string | $$"1") | $$"0";

optmutable = ("mutable" ws $$"1" | $$"0" ) $"s2i";

type = $("i32" | "i64" | "f32" | "f64" | "v128" | "func" | "extern" | "auto") $"type_1" ws;

reftype = $("func" | "extern") $"type_1" ws;

type_list = "(" ws types ")" ws | ($"nil" type $"cons") $"types_1";

types = ($"nil" type $"cons" ("," ws type $"cons")* | $"nil") $"types_1";

fn_type = "(" ws types ")" ws "->" ws type_list $"fn_type_2";

//			| id "<" ws types ">" ws $"partype_2"
//			| type;

id = $(('a'-'z' | 'A'-'Z' | '_') letterOrDigit*) ws;

letterOrDigit = 'a'-'z'
	| 'A'-'Z'
	| '_'
	| '0'-'9';

int = $('0'-'9'+) ws $"s2i"; 

double = $(digits '.' (!'.') digits?) ws $"s2d"
	| $('.' digits) ws $"s2d";
digits = '0'-'9'+;

string = $('"' onechar_* '"') $"unescape" ws;

onechar_ = backslash "u" hexdigit hexdigit hexdigit hexdigit
	| backslash "x" hexdigit hexdigit
	| backslash escapedchar_
	| !'"' !backslash anychar;

hexdigit = '0'-'9'
	| 'a'-'f'
	| 'A'-'F';

escapedchar_ = backslash | '"' | "n" | "t" | "r";
backslash = '\';

ws = s*;
s = cs+;
anychar = '0x0000'-'0xffff';
cs = " " | "\t" | "\n" | "//" (!"\n" anychar)* "\n" | "/*" (!"*/" anychar)* "*/" | "\r";
lastLineComment = "//" (!"\n" anychar)*;

wase
